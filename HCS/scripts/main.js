// Generated by Construct, the game and animation creation tool
// Visit: https://www.construct.net

// workers/domHandler.js
'use strict';{window.DOMHandler=class DOMHandler{constructor(iRuntime,componentId){this._iRuntime=iRuntime;this._componentId=componentId;this._hasTickCallback=false;this._tickCallback=()=>this.Tick()}Attach(){}PostToRuntime(handler,data,dispatchOpts,transferables){this._iRuntime.PostToRuntimeComponent(this._componentId,handler,data,dispatchOpts,transferables)}PostToRuntimeAsync(handler,data,dispatchOpts,transferables){return this._iRuntime.PostToRuntimeComponentAsync(this._componentId,handler,data,
dispatchOpts,transferables)}_PostToRuntimeMaybeSync(name,data,dispatchOpts){if(this._iRuntime.UsesWorker())this.PostToRuntime(name,data,dispatchOpts);else this._iRuntime._GetLocalRuntime()["_OnMessageFromDOM"]({"type":"event","component":this._componentId,"handler":name,"dispatchOpts":dispatchOpts||null,"data":data,"responseId":null})}AddRuntimeMessageHandler(handler,func){this._iRuntime.AddRuntimeComponentMessageHandler(this._componentId,handler,func)}AddRuntimeMessageHandlers(list){for(const [handler,
func]of list)this.AddRuntimeMessageHandler(handler,func)}GetRuntimeInterface(){return this._iRuntime}GetComponentID(){return this._componentId}_StartTicking(){if(this._hasTickCallback)return;this._iRuntime._AddRAFCallback(this._tickCallback);this._hasTickCallback=true}_StopTicking(){if(!this._hasTickCallback)return;this._iRuntime._RemoveRAFCallback(this._tickCallback);this._hasTickCallback=false}Tick(){}};window.RateLimiter=class RateLimiter{constructor(callback,interval){this._callback=callback;
this._interval=interval;this._timerId=-1;this._lastCallTime=-Infinity;this._timerCallFunc=()=>this._OnTimer();this._ignoreReset=false;this._canRunImmediate=false}SetCanRunImmediate(c){this._canRunImmediate=!!c}Call(){if(this._timerId!==-1)return;const nowTime=Date.now();const timeSinceLastCall=nowTime-this._lastCallTime;const interval=this._interval;if(timeSinceLastCall>=interval&&this._canRunImmediate){this._lastCallTime=nowTime;this._RunCallback()}else this._timerId=self.setTimeout(this._timerCallFunc,
Math.max(interval-timeSinceLastCall,4))}_RunCallback(){this._ignoreReset=true;this._callback();this._ignoreReset=false}Reset(){if(this._ignoreReset)return;this._CancelTimer();this._lastCallTime=Date.now()}_OnTimer(){this._timerId=-1;this._lastCallTime=Date.now();this._RunCallback()}_CancelTimer(){if(this._timerId!==-1){self.clearTimeout(this._timerId);this._timerId=-1}}Release(){this._CancelTimer();this._callback=null;this._timerCallFunc=null}}};


// workers/domElementHandler.js
'use strict';{class ElementState{constructor(elem){this._elem=elem;this._hadFirstUpdate=false;this._isVisibleFlag=true;this._wantHtmlIndex=-1;this._actualHtmlIndex=-1;this._htmlZIndex=-1}SetVisibleFlag(f){this._isVisibleFlag=!!f}GetVisibleFlag(){return this._isVisibleFlag}HadFirstUpdate(){return this._hadFirstUpdate}SetHadFirstUpdate(){this._hadFirstUpdate=true}GetWantHTMLIndex(){return this._wantHtmlIndex}SetWantHTMLIndex(i){this._wantHtmlIndex=i}GetActualHTMLIndex(){return this._actualHtmlIndex}SetActualHTMLIndex(i){this._actualHtmlIndex=
i}SetHTMLZIndex(z){this._htmlZIndex=z}GetHTMLZIndex(){return this._htmlZIndex}GetElement(){return this._elem}}window.DOMElementHandler=class DOMElementHandler extends self.DOMHandler{constructor(iRuntime,componentId){super(iRuntime,componentId);this._elementMap=new Map;this._autoAttach=true;this.AddRuntimeMessageHandlers([["create",e=>this._OnCreate(e)],["destroy",e=>this._OnDestroy(e)],["set-visible",e=>this._OnSetVisible(e)],["update-position",e=>this._OnUpdatePosition(e)],["update-state",e=>this._OnUpdateState(e)],
["focus",e=>this._OnSetFocus(e)],["set-css-style",e=>this._OnSetCssStyle(e)],["set-attribute",e=>this._OnSetAttribute(e)],["remove-attribute",e=>this._OnRemoveAttribute(e)]]);this.AddDOMElementMessageHandler("get-element",elem=>elem)}SetAutoAttach(e){this._autoAttach=!!e}AddDOMElementMessageHandler(handler,func){this.AddRuntimeMessageHandler(handler,e=>{const elementId=e["elementId"];const elem=this.GetElementById(elementId);return func(elem,e)})}AddDOMElementMessageHandlers(arr){for(const [handler,
func]of arr)this.AddDOMElementMessageHandler(handler,func)}_OnCreate(e){const elementId=e["elementId"];const elem=this.CreateElement(elementId,e);const elementState=new ElementState(elem);this._elementMap.set(elementId,elementState);elem.style.boxSizing="border-box";elem.style.display="none";elementState.SetVisibleFlag(e["isVisible"]);const focusElem=this._GetFocusElement(elem);focusElem.addEventListener("focus",e=>this._OnFocus(elementId));focusElem.addEventListener("blur",e=>this._OnBlur(elementId));
const wantHtmlIndex=e["htmlIndex"];elementState.SetWantHTMLIndex(wantHtmlIndex);elementState.SetHTMLZIndex(e["htmlZIndex"]);if(this._autoAttach){const actualHtmlIndex=this.GetRuntimeInterface().GetAvailableHTMLIndex(wantHtmlIndex);elementState.SetActualHTMLIndex(actualHtmlIndex);const parent=this.GetRuntimeInterface().GetHTMLWrapElement(actualHtmlIndex);parent.appendChild(elem)}}CreateElement(elementId,e){throw new Error("required override");}DestroyElement(elem){}_OnDestroy(e){const elementId=e["elementId"];
const elem=this.GetElementById(elementId);this.DestroyElement(elem);if(this._autoAttach)elem.parentElement.removeChild(elem);this._elementMap.delete(elementId)}PostToRuntimeElement(handler,elementId,data){if(!data)data={};data["elementId"]=elementId;this.PostToRuntime(handler,data)}_PostToRuntimeElementMaybeSync(handler,elementId,data){if(!data)data={};data["elementId"]=elementId;this._PostToRuntimeMaybeSync(handler,data)}_OnSetVisible(e){if(!this._autoAttach)return;const elemState=this._elementMap.get(e["elementId"]);
const elem=elemState.GetElement();if(elemState.HadFirstUpdate())elem.style.display=e["isVisible"]?"":"none";else elemState.SetVisibleFlag(e["isVisible"])}_OnUpdatePosition(e){if(!this._autoAttach)return;const elemState=this._elementMap.get(e["elementId"]);const elem=elemState.GetElement();const iRuntime=this.GetRuntimeInterface();elem.style.left=e["left"]+"px";elem.style.top=e["top"]+"px";elem.style.width=e["width"]+"px";elem.style.height=e["height"]+"px";const fontSize=e["fontSize"];if(fontSize!==
null)elem.style.fontSize=fontSize+"em";const wantHtmlIndex=e["htmlIndex"];elemState.SetWantHTMLIndex(wantHtmlIndex);const actualHtmlIndex=iRuntime.GetAvailableHTMLIndex(wantHtmlIndex);if(actualHtmlIndex!==elemState.GetActualHTMLIndex()){elem.remove();const parent=iRuntime.GetHTMLWrapElement(actualHtmlIndex);parent.appendChild(elem);elemState.SetActualHTMLIndex(actualHtmlIndex);iRuntime._UpdateHTMLElementsZOrder()}const htmlZIndex=e["htmlZIndex"];if(htmlZIndex!==elemState.GetHTMLZIndex()){elemState.SetHTMLZIndex(htmlZIndex);
iRuntime._UpdateHTMLElementsZOrder()}if(!elemState.HadFirstUpdate()){elemState.SetHadFirstUpdate();if(elemState.GetVisibleFlag())elem.style.display=""}}_OnHTMLLayersChanged(){if(!this._autoAttach)return;for(const elemState of this._elementMap.values()){const wantHtmlIndex=this.GetRuntimeInterface().GetAvailableHTMLIndex(elemState.GetWantHTMLIndex());const actualHtmlIndex=elemState.GetActualHTMLIndex();if(wantHtmlIndex!==-1&&actualHtmlIndex!==-1&&wantHtmlIndex!==actualHtmlIndex){const elem=elemState.GetElement();
elem.remove();const parent=this.GetRuntimeInterface().GetHTMLWrapElement(wantHtmlIndex);parent.appendChild(elem);elemState.SetActualHTMLIndex(wantHtmlIndex)}}}_GetAllElementStatesForZOrderUpdate(){if(!this._autoAttach)return null;return[...this._elementMap.values()]}_OnUpdateState(e){const elem=this.GetElementById(e["elementId"]);this.UpdateState(elem,e)}UpdateState(elem,e){throw new Error("required override");}_GetFocusElement(elem){return elem}_OnFocus(elementId){this.PostToRuntimeElement("elem-focused",
elementId)}_OnBlur(elementId){this.PostToRuntimeElement("elem-blurred",elementId)}_OnSetFocus(e){const elem=this._GetFocusElement(this.GetElementById(e["elementId"]));if(e["focus"])elem.focus();else elem.blur()}_OnSetCssStyle(e){const elem=this.GetElementById(e["elementId"]);const prop=e["prop"];const val=e["val"];if(prop.startsWith("--"))elem.style.setProperty(prop,val);else elem.style[prop]=val}_OnSetAttribute(e){const elem=this.GetElementById(e["elementId"]);elem.setAttribute(e["name"],e["val"])}_OnRemoveAttribute(e){const elem=
this.GetElementById(e["elementId"]);elem.removeAttribute(e["name"])}GetElementById(elementId){const elementState=this._elementMap.get(elementId);if(!elementState)throw new Error(`no element with id ${elementId}`);return elementState.GetElement()}}};


// workers/domSide.js
'use strict';{const isiOSLike=/(iphone|ipod|ipad|macos|macintosh|mac os x)/i.test(navigator.userAgent);const isAndroid=/android/i.test(navigator.userAgent);const isSafari=/safari/i.test(navigator.userAgent)&&!/(chrome|chromium|edg\/|OPR\/|nwjs)/i.test(navigator.userAgent);let resolveCounter=0;function AddScript(url){const elem=document.createElement("script");elem.async=false;elem.type="module";if(url.isStringSrc)return new Promise(resolve=>{const resolveName="c3_resolve_"+resolveCounter;++resolveCounter;
self[resolveName]=resolve;elem.textContent=url.str+`\n\nself["${resolveName}"]();`;document.head.appendChild(elem)});else return new Promise((resolve,reject)=>{elem.onload=resolve;elem.onerror=reject;elem.src=url;document.head.appendChild(elem)})}async function CheckSupportsWorkerMode(){if(!navigator["userActivation"]||typeof OffscreenCanvas==="undefined")return false;try{const workerScript=`
	self.addEventListener("message", () =>
	{
		try {
			const offscreenCanvas = new OffscreenCanvas(32, 32);
			const gl = offscreenCanvas.getContext("webgl");
			self.postMessage(!!gl);
		}
		catch (err)
		{
			console.warn("Feature detection worker error:", err);
			self.postMessage(false);
		}
	});`;let isWorkerModuleSupported=false;const workerScriptBlob=new Blob([workerScript],{"type":"text/javascript"});const w=new Worker(URL.createObjectURL(workerScriptBlob),{get type(){isWorkerModuleSupported=true}});const result=await new Promise(resolve=>{w.addEventListener("message",e=>{w.terminate();resolve(e.data)});w.postMessage("")});return isWorkerModuleSupported&&result}catch(err){console.warn("Error feature detecting worker mode: ",err);return false}}let tmpAudio=new Audio;const supportedAudioFormats=
{"audio/webm; codecs=opus":!!tmpAudio.canPlayType("audio/webm; codecs=opus"),"audio/ogg; codecs=opus":!!tmpAudio.canPlayType("audio/ogg; codecs=opus"),"audio/webm; codecs=vorbis":!!tmpAudio.canPlayType("audio/webm; codecs=vorbis"),"audio/ogg; codecs=vorbis":!!tmpAudio.canPlayType("audio/ogg; codecs=vorbis"),"audio/mp4":!!tmpAudio.canPlayType("audio/mp4"),"audio/mpeg":!!tmpAudio.canPlayType("audio/mpeg")};tmpAudio=null;async function BlobToString(blob){const arrayBuffer=await BlobToArrayBuffer(blob);
const textDecoder=new TextDecoder("utf-8");return textDecoder.decode(arrayBuffer)}function BlobToArrayBuffer(blob){return new Promise((resolve,reject)=>{const fileReader=new FileReader;fileReader.onload=e=>resolve(e.target.result);fileReader.onerror=err=>reject(err);fileReader.readAsArrayBuffer(blob)})}const queuedArrayBufferReads=[];let activeArrayBufferReads=0;const MAX_ARRAYBUFFER_READS=8;window["RealFile"]=window["File"];const domHandlerClasses=[];const runtimeEventHandlers=new Map;const pendingResponsePromises=
new Map;let nextResponseId=0;const runOnStartupFunctions=[];self.runOnStartup=function runOnStartup(f){if(typeof f!=="function")throw new Error("runOnStartup called without a function");runOnStartupFunctions.push(f)};const WEBVIEW_EXPORT_TYPES=new Set(["cordova","playable-ad-single-file","playable-ad-zip","instant-games"]);function IsWebViewExportType(exportType){return WEBVIEW_EXPORT_TYPES.has(exportType)}let isWrapperFullscreen=false;window.RuntimeInterface=class RuntimeInterface{constructor(opts){this._useWorker=
opts.useWorker;this._messageChannelPort=null;this._runtimeBaseUrl="";this._scriptFolder=opts.scriptFolder;this._worker=null;this._localRuntime=null;this._domHandlers=[];this._runtimeDomHandler=null;this._isFirstSizeUpdate=true;this._canvasLayers=[];this._pendingRemoveElements=[];this._pendingUpdateHTMLZOrder=false;this._updateHTMLZOrderRAFCallback=()=>this._DoUpdateHTMLElementsZOrder();this._isExportingToVideo=false;this._exportToVideoDuration=0;this._jobScheduler=null;this._rafId=-1;this._rafFunc=
()=>this._OnRAFCallback();this._rafCallbacks=new Set;this._wrapperInitResolve=null;this._wrapperComponentIds=[];this._exportType=opts.exportType;this._isFileProtocol=location.protocol.substr(0,4)==="file";this._directoryHandles=[];if(this._exportType==="playable-ad-single-file"||this._exportType==="playable-ad-zip"||this._exportType==="instant-games")this._useWorker=false;if(isSafari)this._useWorker=false;if(this._exportType==="cordova"&&this._useWorker)if(isAndroid){const chromeVer=/Chrome\/(\d+)/i.exec(navigator.userAgent);
if(!chromeVer||!(parseInt(chromeVer[1],10)>=90))this._useWorker=false}if(this.IsAnyWebView2Wrapper())self["chrome"]["webview"].addEventListener("message",e=>this._OnWrapperMessage(e.data,e["additionalObjects"]));else if(this._exportType==="macos-wkwebview")self["C3WrapperOnMessage"]=msg=>this._OnWrapperMessage(msg);this._localFileBlobs=null;this._localFileStrings=null;if(this._exportType==="html5"&&!window.isSecureContext)console.warn("[Construct] Warning: the browser indicates this is not a secure context. Some features may be unavailable. Use secure (HTTPS) hosting to ensure all features are available.");
this.AddRuntimeComponentMessageHandler("canvas","update-size",e=>this._OnUpdateCanvasSize(e));this.AddRuntimeComponentMessageHandler("canvas","set-html-layer-count",e=>this["_OnSetHTMLLayerCount"](e));this.AddRuntimeComponentMessageHandler("canvas","cleanup-html-layers",()=>this._OnCleanUpHTMLLayers());this.AddRuntimeComponentMessageHandler("runtime","cordova-fetch-local-file",e=>this._OnCordovaFetchLocalFile(e));this.AddRuntimeComponentMessageHandler("runtime","create-job-worker",e=>this._OnCreateJobWorker(e));
this.AddRuntimeComponentMessageHandler("runtime","send-wrapper-extension-message",e=>this._OnSendWrapperExtensionMessage(e));if(this._exportType==="cordova")document.addEventListener("deviceready",()=>this._Init(opts));else this._Init(opts)}Release(){this._CancelAnimationFrame();if(this._messageChannelPort){this._messageChannelPort.onmessage=null;this._messageChannelPort=null}if(this._worker){this._worker.terminate();this._worker=null}if(this._localRuntime){this._localRuntime.Release();this._localRuntime=
null}for(const {canvas,htmlWrap}of this._canvasLayers){canvas.remove();htmlWrap.remove()}this._canvasLayers.length=0}GetMainCanvas(){return this._canvasLayers[0].canvas}GetAvailableHTMLIndex(index){return Math.min(index,this._canvasLayers.length-1)}GetHTMLWrapElement(index){if(index<0||index>=this._canvasLayers.length)throw new RangeError("invalid canvas layer");return this._canvasLayers[index].htmlWrap}["_GetHTMLWrapElement"](index){return this.GetHTMLWrapElement(index)}GetRuntimeBaseURL(){return this._runtimeBaseUrl}UsesWorker(){return this._useWorker}GetExportType(){return this._exportType}IsFileProtocol(){return this._isFileProtocol}GetScriptFolder(){return this._scriptFolder}IsiOSCordova(){return isiOSLike&&
this._exportType==="cordova"}IsiOSWebView(){const ua=navigator.userAgent;return isiOSLike&&IsWebViewExportType(this._exportType)||navigator["standalone"]||/crios\/|fxios\/|edgios\//i.test(ua)}IsAndroid(){return isAndroid}IsAndroidWebView(){return isAndroid&&IsWebViewExportType(this._exportType)}IsWindowsWebView2(){return this._exportType==="windows-webview2"||!!(this._exportType==="preview"&&window["chrome"]&&window["chrome"]["webview"]&&window["chrome"]["webview"]["postMessage"])}IsAnyWebView2Wrapper(){return this.IsWindowsWebView2()||
this._exportType==="xbox-uwp-webview2"}async _Init(opts){if(this._useWorker){const isWorkerModeSupported=await CheckSupportsWorkerMode();if(!isWorkerModeSupported)this._useWorker=false}if(this._exportType==="macos-wkwebview")this._SendWrapperMessage({"type":"ready"});else if(this.IsAnyWebView2Wrapper()){this._SetupWebView2Polyfills();const result=await this._InitWrapper();this._wrapperComponentIds=result["registeredComponentIds"]}if(this._exportType==="playable-ad-single-file"){this._localFileBlobs=
self["c3_base64files"];this._localFileStrings={};await this._ConvertDataUrisToBlobs()}if(this._exportType==="nwjs"&&self["nw"]&&self["nw"]["App"]["manifest"]["c3-steam-mode"]){let frameNum=0;this._AddRAFCallback(()=>{frameNum++;document.documentElement.style.opacity=frameNum%2===0?"1":"0.999"})}if(opts.runtimeBaseUrl)this._runtimeBaseUrl=opts.runtimeBaseUrl;else{const origin=location.origin;this._runtimeBaseUrl=(origin==="null"?"file:///":origin)+location.pathname;const i=this._runtimeBaseUrl.lastIndexOf("/");
if(i!==-1)this._runtimeBaseUrl=this._runtimeBaseUrl.substr(0,i+1)}const messageChannel=new MessageChannel;this._messageChannelPort=messageChannel.port1;this._messageChannelPort.onmessage=e=>this["_OnMessageFromRuntime"](e.data);if(window["c3_addPortMessageHandler"])window["c3_addPortMessageHandler"](e=>this._OnMessageFromDebugger(e));this._jobScheduler=new self.JobSchedulerDOM(this);await this._jobScheduler.Init();if(typeof window["StatusBar"]==="object")window["StatusBar"]["hide"]();if(typeof window["AndroidFullScreen"]===
"object")try{await new Promise((resolve,reject)=>{window["AndroidFullScreen"]["immersiveMode"](resolve,reject)})}catch(err){console.error("Failed to enter Android immersive mode: ",err)}if(this._useWorker)await this._InitWorker(opts,messageChannel.port2);else await this._InitDOM(opts,messageChannel.port2)}_GetCommonRuntimeOptions(opts){return{"runtimeBaseUrl":this._runtimeBaseUrl,"previewUrl":location.href,"windowInnerWidth":this._GetWindowInnerWidth(),"windowInnerHeight":this._GetWindowInnerHeight(),
"cssDisplayMode":this.GetCssDisplayMode(),"devicePixelRatio":window.devicePixelRatio,"isFullscreen":RuntimeInterface.IsDocumentFullscreen(),"swClientId":window["cr_swClientId"]||"","exportType":opts.exportType,"fileMap":globalThis.c3_swFileMap??new Map(Object.entries(this._localFileBlobs??{})),"scriptFolder":this._scriptFolder,"isDebug":(new URLSearchParams(self.location.search)).has("debug"),"ife":!!self.ife,"jobScheduler":this._jobScheduler.GetPortData(),"supportedAudioFormats":supportedAudioFormats,
"isFileProtocol":this._isFileProtocol,"isiOSCordova":this.IsiOSCordova(),"isiOSWebView":this.IsiOSWebView(),"isWindowsWebView2":this.IsWindowsWebView2(),"isAnyWebView2Wrapper":this.IsAnyWebView2Wrapper(),"wrapperComponentIds":this._wrapperComponentIds,"isFBInstantAvailable":typeof self["FBInstant"]!=="undefined"}}async _InitWorker(opts,port2){const workerMainUrl=opts.workerMainUrl;if(this._exportType==="preview"){this._worker=new Worker("previewworker.js",{type:"module",name:"Runtime"});await new Promise((resolve,
reject)=>{const messageHandler=e=>{this._worker.removeEventListener("message",messageHandler);if(e.data&&e.data["type"]==="ok")resolve();else reject()};this._worker.addEventListener("message",messageHandler);this._worker.postMessage({"type":"construct-worker-init","import":(new URL(workerMainUrl,this._runtimeBaseUrl)).toString()})})}else this._worker=await this.CreateWorker(workerMainUrl,{type:"module",name:"Runtime"});const canvas=document.createElement("canvas");canvas.style.display="none";const offscreenCanvas=
canvas["transferControlToOffscreen"]();document.body.appendChild(canvas);const htmlWrap=document.createElement("div");htmlWrap.className="c3htmlwrap";document.body.appendChild(htmlWrap);this._canvasLayers.push({canvas,htmlWrap});window["c3canvas"]=canvas;if(self["C3_InsertHTMLPlaceholders"])self["C3_InsertHTMLPlaceholders"]();this._worker.postMessage(Object.assign(this._GetCommonRuntimeOptions(opts),{"type":"init-runtime","isInWorker":true,"messagePort":port2,"canvas":offscreenCanvas,"runtimeScriptList":opts.runtimeScriptList,
"projectMainScriptPath":opts.projectMainScriptPath,"scriptsInEventsPath":opts.scriptsInEventsPath}),[port2,offscreenCanvas,...this._jobScheduler.GetPortTransferables()]);this._domHandlers=domHandlerClasses.map(C=>new C(this));this._FindRuntimeDOMHandler();this._runtimeDomHandler._AddDefaultCanvasEventHandlers(canvas);this._runtimeDomHandler._AddDefaultHTMLWrapEventHandlers(htmlWrap);this._runtimeDomHandler._EnableWindowResizeEvent();self["c3_callFunction"]=(name,params)=>this._runtimeDomHandler._InvokeFunctionFromJS(name,
params);if(this._exportType==="preview")self["goToLastErrorScript"]=()=>this.PostToRuntimeComponent("runtime","go-to-last-error-script")}async _InitDOM(opts,port2){const canvas=document.createElement("canvas");canvas.style.display="none";document.body.appendChild(canvas);const htmlWrap=document.createElement("div");htmlWrap.className="c3htmlwrap";document.body.appendChild(htmlWrap);this._canvasLayers.push({canvas,htmlWrap});window["c3canvas"]=canvas;if(self["C3_InsertHTMLPlaceholders"])self["C3_InsertHTMLPlaceholders"]();
this._domHandlers=domHandlerClasses.map(C=>new C(this));this._FindRuntimeDOMHandler();this._runtimeDomHandler._AddDefaultCanvasEventHandlers(canvas);this._runtimeDomHandler._AddDefaultHTMLWrapEventHandlers(htmlWrap);const runtimeScriptList=await Promise.all(opts.runtimeScriptList.map(url=>this._MaybeGetPlatformSpecificScriptURL(url)));await Promise.all(runtimeScriptList.map(url=>AddScript(url)));const projectMainScriptPath=opts.projectMainScriptPath;const scriptsInEventsPath=opts.scriptsInEventsPath;
if(projectMainScriptPath)try{await AddScript(projectMainScriptPath);if(this._exportType==="preview"&&!globalThis.C3_ProjectMainScriptOK)throw new Error("main script did not run to completion");}catch(err){this._RemoveLoadingMessage();console.error("Error loading project main script: ",err);alert(`Failed to load the project main script (${projectMainScriptPath}). Check all your JavaScript code has valid syntax, all imports are written correctly, and that an exception was not thrown running the script. Press F12 and check the console for error details.`)}if(scriptsInEventsPath)try{await AddScript(scriptsInEventsPath);
if(this._exportType==="preview"&&!globalThis.C3.ScriptsInEvents)throw new Error("scripts in events did not run to completion");}catch(err){this._RemoveLoadingMessage();console.error("Error loading scripts in events: ",err);alert(`Failed to load scripts in events. Check all your JavaScript code has valid syntax, all imports are written correctly, and that an exception was not thrown running the 'Imports for events' script. Press F12 and check the console for error details.`)}const runtimeOpts=Object.assign(this._GetCommonRuntimeOptions(opts),
{"isInWorker":false,"messagePort":port2,"canvas":canvas,"runOnStartupFunctions":runOnStartupFunctions});this._runtimeDomHandler._EnableWindowResizeEvent();this._OnBeforeCreateRuntime();this._localRuntime=self["C3_CreateRuntime"](runtimeOpts);await self["C3_InitRuntime"](this._localRuntime,runtimeOpts)}async CreateWorker(url,workerOpts){if(url.startsWith("blob:"))return new Worker(url,workerOpts);if(this._exportType==="cordova"&&this._isFileProtocol){const arrayBuffer=await this.CordovaFetchLocalFileAsArrayBuffer(url);
const blob=new Blob([arrayBuffer],{type:"application/javascript"});return new Worker(URL.createObjectURL(blob),workerOpts)}if(this._exportType==="playable-ad-single-file"){const blob=this._localFileBlobs[url];if(!blob)throw new Error("missing script: "+url);return new Worker(URL.createObjectURL(blob),workerOpts)}const absUrl=new URL(url,location.href);const isCrossOrigin=location.origin!==absUrl.origin;if(isCrossOrigin){const response=await fetch(absUrl);if(!response.ok)throw new Error("failed to fetch worker script");
const blob=await response.blob();return new Worker(URL.createObjectURL(blob),workerOpts)}else return new Worker(absUrl,workerOpts)}_GetWindowInnerWidth(){return Math.max(window.innerWidth,1)}_GetWindowInnerHeight(){return Math.max(window.innerHeight,1)}GetCssDisplayMode(){if(this.IsAnyWebView2Wrapper())return"standalone";const exportType=this.GetExportType();const standaloneExportTypes=new Set(["cordova","nwjs","macos-wkwebview"]);if(standaloneExportTypes.has(exportType))return"standalone";if(window.matchMedia("(display-mode: fullscreen)").matches)return"fullscreen";
else if(window.matchMedia("(display-mode: standalone)").matches)return"standalone";else if(window.matchMedia("(display-mode: minimal-ui)").matches)return"minimal-ui";else if(navigator["standalone"])return"standalone";else return"browser"}_OnBeforeCreateRuntime(){this._RemoveLoadingMessage()}_RemoveLoadingMessage(){const loadingElem=window["cr_previewLoadingElem"];if(loadingElem){loadingElem.parentElement.removeChild(loadingElem);window["cr_previewLoadingElem"]=null}}async _OnCreateJobWorker(e){const outputPort=
await this._jobScheduler._CreateJobWorker();return{"outputPort":outputPort,"transferables":[outputPort]}}_OnUpdateCanvasSize(e){if(this.IsExportingToVideo())return;const widthPx=e["styleWidth"]+"px";const heightPx=e["styleHeight"]+"px";const leftPx=e["marginLeft"]+"px";const topPx=e["marginTop"]+"px";for(const {canvas,htmlWrap}of this._canvasLayers){canvas.style.width=widthPx;canvas.style.height=heightPx;canvas.style.marginLeft=leftPx;canvas.style.marginTop=topPx;htmlWrap.style.width=widthPx;htmlWrap.style.height=
heightPx;htmlWrap.style.marginLeft=leftPx;htmlWrap.style.marginTop=topPx;if(this._isFirstSizeUpdate){canvas.style.display="";htmlWrap.style.display=""}}document.documentElement.style.setProperty("--construct-scale",e["displayScale"]);this._isFirstSizeUpdate=false}["_OnSetHTMLLayerCount"](e){const count=e["count"];const immediate=e["immediate"];const widthPx=e["styleWidth"]+"px";const heightPx=e["styleHeight"]+"px";const leftPx=e["marginLeft"]+"px";const topPx=e["marginTop"]+"px";const addedCanvases=
[];const transferables=[];if(count<this._canvasLayers.length)while(this._canvasLayers.length>count){const {canvas,htmlWrap}=this._canvasLayers.pop();htmlWrap.remove();if(this._useWorker&&!immediate)this._pendingRemoveElements.push(canvas);else canvas.remove()}else if(count>this._canvasLayers.length)for(let i=0,len=count-this._canvasLayers.length;i<len;++i){const canvas=document.createElement("canvas");canvas.classList.add("c3overlay");if(this._useWorker){const offscreenCanvas=canvas["transferControlToOffscreen"]();
addedCanvases.push(offscreenCanvas);transferables.push(offscreenCanvas)}else addedCanvases.push(canvas);document.body.appendChild(canvas);const htmlWrap=document.createElement("div");htmlWrap.classList.add("c3htmlwrap","c3overlay");document.body.appendChild(htmlWrap);canvas.style.width=widthPx;canvas.style.height=heightPx;canvas.style.marginLeft=leftPx;canvas.style.marginTop=topPx;htmlWrap.style.width=widthPx;htmlWrap.style.height=heightPx;htmlWrap.style.marginLeft=leftPx;htmlWrap.style.marginTop=
topPx;this._runtimeDomHandler._AddDefaultCanvasEventHandlers(canvas);this._runtimeDomHandler._AddDefaultHTMLWrapEventHandlers(htmlWrap);this._canvasLayers.push({canvas,htmlWrap})}for(const domHandler of this._domHandlers)if(domHandler instanceof window.DOMElementHandler)domHandler._OnHTMLLayersChanged();this._UpdateHTMLElementsZOrder();return{"addedCanvases":addedCanvases,"transferables":transferables}}_OnCleanUpHTMLLayers(){for(const elem of this._pendingRemoveElements)elem.remove();this._pendingRemoveElements.length=
0}_UpdateHTMLElementsZOrder(){if(this._pendingUpdateHTMLZOrder)return;this._pendingUpdateHTMLZOrder=true;this._AddRAFCallback(this._updateHTMLZOrderRAFCallback)}_DoUpdateHTMLElementsZOrder(){this._RemoveRAFCallback(this._updateHTMLZOrderRAFCallback);this._pendingUpdateHTMLZOrder=false;let allElementStates=[];for(const domHandler of this._domHandlers)if(domHandler instanceof window.DOMElementHandler){const elemStates=domHandler._GetAllElementStatesForZOrderUpdate();if(elemStates)allElementStates.push(...elemStates)}allElementStates.sort((a,
b)=>{const a1=a.GetActualHTMLIndex();const b1=b.GetActualHTMLIndex();if(a1!==b1)return a1-b1;const a2=a.GetHTMLZIndex();const b2=b.GetHTMLZIndex();return a2-b2});let curHtmlIndex=0;let s=0,i=0,len=allElementStates.length;for(;i<len;++i){const es=allElementStates[i];if(es.GetActualHTMLIndex()!==curHtmlIndex){this._DoUpdateHTMLElementsZOrderOnHTMLLayer(curHtmlIndex,allElementStates.slice(s,i));curHtmlIndex=es.GetActualHTMLIndex();s=i}}if(s<i)this._DoUpdateHTMLElementsZOrderOnHTMLLayer(curHtmlIndex,
allElementStates.slice(s,i))}_DoUpdateHTMLElementsZOrderOnHTMLLayer(htmlIndex,arr){if(arr.length<=1)return;if(htmlIndex>=this._canvasLayers.length)return;const newChildren=arr.map(es=>es.GetElement());const newChildrenSet=new Set(newChildren);const htmlWrap=this.GetHTMLWrapElement(htmlIndex);const existingChildren=Array.from(htmlWrap.children).filter(elem=>newChildrenSet.has(elem));let i=0,len=Math.min(newChildren.length,existingChildren.length);for(;i<len;++i)if(newChildren[i]!==existingChildren[i])break;
let j=i;for(;j<len;++j)existingChildren[j].remove();j=i;for(;j<len;++j)htmlWrap.appendChild(newChildren[j])}_GetLocalRuntime(){if(this._useWorker)throw new Error("not available in worker mode");return this._localRuntime}PostToRuntimeComponent(component,handler,data,dispatchOpts,transferables){this._messageChannelPort.postMessage({"type":"event","component":component,"handler":handler,"dispatchOpts":dispatchOpts||null,"data":data,"responseId":null},transferables)}PostToRuntimeComponentAsync(component,
handler,data,dispatchOpts,transferables){const responseId=nextResponseId++;const ret=new Promise((resolve,reject)=>{pendingResponsePromises.set(responseId,{resolve,reject})});this._messageChannelPort.postMessage({"type":"event","component":component,"handler":handler,"dispatchOpts":dispatchOpts||null,"data":data,"responseId":responseId},transferables);return ret}["_OnMessageFromRuntime"](data){const type=data["type"];if(type==="event")return this._OnEventFromRuntime(data);else if(type==="result")this._OnResultFromRuntime(data);
else if(type==="runtime-ready")this._OnRuntimeReady();else if(type==="alert-error"){this._RemoveLoadingMessage();alert(data["message"])}else if(type==="creating-runtime")this._OnBeforeCreateRuntime();else throw new Error(`unknown message '${type}'`);}_OnEventFromRuntime(e){const component=e["component"];const handler=e["handler"];const data=e["data"];const responseId=e["responseId"];const handlerMap=runtimeEventHandlers.get(component);if(!handlerMap){console.warn(`[DOM] No event handlers for component '${component}'`);
return}const func=handlerMap.get(handler);if(!func){console.warn(`[DOM] No handler '${handler}' for component '${component}'`);return}let ret=null;try{ret=func(data)}catch(err){console.error(`Exception in '${component}' handler '${handler}':`,err);if(responseId!==null)this._PostResultToRuntime(responseId,false,""+err);return}if(responseId===null)return ret;else if(ret&&ret.then)ret.then(result=>this._PostResultToRuntime(responseId,true,result)).catch(err=>{console.error(`Rejection from '${component}' handler '${handler}':`,
err);this._PostResultToRuntime(responseId,false,""+err)});else this._PostResultToRuntime(responseId,true,ret)}_PostResultToRuntime(responseId,isOk,result){let transferables;if(result&&result["transferables"])transferables=result["transferables"];this._messageChannelPort.postMessage({"type":"result","responseId":responseId,"isOk":isOk,"result":result},transferables)}_OnResultFromRuntime(data){const responseId=data["responseId"];const isOk=data["isOk"];const result=data["result"];const pendingPromise=
pendingResponsePromises.get(responseId);if(isOk)pendingPromise.resolve(result);else pendingPromise.reject(result);pendingResponsePromises.delete(responseId)}AddRuntimeComponentMessageHandler(component,handler,func){let handlerMap=runtimeEventHandlers.get(component);if(!handlerMap){handlerMap=new Map;runtimeEventHandlers.set(component,handlerMap)}if(handlerMap.has(handler))throw new Error(`[DOM] Component '${component}' already has handler '${handler}'`);handlerMap.set(handler,func)}static AddDOMHandlerClass(Class){if(domHandlerClasses.includes(Class))throw new Error("DOM handler already added");
domHandlerClasses.push(Class)}_FindRuntimeDOMHandler(){for(const dh of this._domHandlers)if(dh.GetComponentID()==="runtime"){this._runtimeDomHandler=dh;return}throw new Error("cannot find runtime DOM handler");}_OnMessageFromDebugger(e){this.PostToRuntimeComponent("debugger","message",e)}_OnRuntimeReady(){for(const h of this._domHandlers)h.Attach()}static IsDocumentFullscreen(){return!!(document["fullscreenElement"]||document["webkitFullscreenElement"]||document["mozFullScreenElement"]||isWrapperFullscreen)}static _SetWrapperIsFullscreenFlag(f){isWrapperFullscreen=
!!f}async GetRemotePreviewStatusInfo(){return await this.PostToRuntimeComponentAsync("runtime","get-remote-preview-status-info")}_AddRAFCallback(f){this._rafCallbacks.add(f);this._RequestAnimationFrame()}_RemoveRAFCallback(f){this._rafCallbacks.delete(f);if(this._rafCallbacks.size===0)this._CancelAnimationFrame()}_RequestAnimationFrame(){if(this._rafId===-1&&this._rafCallbacks.size>0)this._rafId=requestAnimationFrame(this._rafFunc)}_CancelAnimationFrame(){if(this._rafId!==-1){cancelAnimationFrame(this._rafId);
this._rafId=-1}}_OnRAFCallback(){this._rafId=-1;for(const f of this._rafCallbacks)f();this._RequestAnimationFrame()}TryPlayMedia(mediaElem){this._runtimeDomHandler.TryPlayMedia(mediaElem)}RemovePendingPlay(mediaElem){this._runtimeDomHandler.RemovePendingPlay(mediaElem)}_PlayPendingMedia(){this._runtimeDomHandler._PlayPendingMedia()}SetSilent(s){this._runtimeDomHandler.SetSilent(s)}IsAudioFormatSupported(typeStr){return!!supportedAudioFormats[typeStr]}async _WasmDecodeWebMOpus(arrayBuffer){const result=
await this.PostToRuntimeComponentAsync("runtime","opus-decode",{"arrayBuffer":arrayBuffer},null,[arrayBuffer]);return new Float32Array(result)}SetIsExportingToVideo(duration){this._isExportingToVideo=true;this._exportToVideoDuration=duration}IsExportingToVideo(){return this._isExportingToVideo}GetExportToVideoDuration(){return this._exportToVideoDuration}IsAbsoluteURL(url){return/^(?:[a-z\-]+:)?\/\//.test(url)||url.substr(0,5)==="data:"||url.substr(0,5)==="blob:"}IsRelativeURL(url){return!this.IsAbsoluteURL(url)}async _MaybeGetPlatformSpecificScriptURL(url){if(this._exportType===
"cordova"&&(url.startsWith("file:")||this._isFileProtocol&&this.IsRelativeURL(url))){let filename=url;if(filename.startsWith(this._runtimeBaseUrl))filename=filename.substr(this._runtimeBaseUrl.length);const arrayBuffer=await this.CordovaFetchLocalFileAsArrayBuffer(filename);const blob=new Blob([arrayBuffer],{type:"application/javascript"});return URL.createObjectURL(blob)}else if(this._exportType==="playable-ad-single-file")if(this._localFileStrings.hasOwnProperty(url))return{isStringSrc:true,str:this._localFileStrings[url]};
else if(this._localFileBlobs.hasOwnProperty(url))return URL.createObjectURL(this._localFileBlobs[url]);else throw new Error("missing script: "+url);else return url}async _OnCordovaFetchLocalFile(e){const filename=e["filename"];switch(e["as"]){case "text":return await this.CordovaFetchLocalFileAsText(filename);case "buffer":return await this.CordovaFetchLocalFileAsArrayBuffer(filename);default:throw new Error("unsupported type");}}CordovaFetchLocalFile(filename){const path=window["cordova"]["file"]["applicationDirectory"]+
"www/"+filename;return new Promise((resolve,reject)=>{window["resolveLocalFileSystemURL"](path,entry=>{entry["file"](resolve,reject)},reject)})}async CordovaFetchLocalFileAsText(filename){const file=await this.CordovaFetchLocalFile(filename);return await BlobToString(file)}_CordovaMaybeStartNextArrayBufferRead(){if(!queuedArrayBufferReads.length)return;if(activeArrayBufferReads>=MAX_ARRAYBUFFER_READS)return;activeArrayBufferReads++;const job=queuedArrayBufferReads.shift();this._CordovaDoFetchLocalFileAsAsArrayBuffer(job.filename,
job.successCallback,job.errorCallback)}CordovaFetchLocalFileAsArrayBuffer(filename){return new Promise((resolve,reject)=>{queuedArrayBufferReads.push({filename:filename,successCallback:result=>{activeArrayBufferReads--;this._CordovaMaybeStartNextArrayBufferRead();resolve(result)},errorCallback:err=>{activeArrayBufferReads--;this._CordovaMaybeStartNextArrayBufferRead();reject(err)}});this._CordovaMaybeStartNextArrayBufferRead()})}async _CordovaDoFetchLocalFileAsAsArrayBuffer(filename,successCallback,
errorCallback){try{const file=await this.CordovaFetchLocalFile(filename);const arrayBuffer=await BlobToArrayBuffer(file);successCallback(arrayBuffer)}catch(err){errorCallback(err)}}["_PlayableAdFetchBlob"](url){if(this._localFileBlobs.hasOwnProperty(url))return this._localFileBlobs[url];else throw new Error("missing file: "+url);}_GetPermissionAPI(){const api=window["cordova"]&&window["cordova"]["plugins"]&&window["cordova"]["plugins"]["permissions"];if(typeof api!=="object")throw new Error("Permission API is not loaded");
return api}_MapPermissionID(api,permission){const permissionID=api[permission];if(typeof permissionID!=="string")throw new Error("Invalid permission name");return permissionID}_HasPermission(id){const api=this._GetPermissionAPI();return new Promise((resolve,reject)=>api["checkPermission"](this._MapPermissionID(api,id),status=>resolve(!!status["hasPermission"]),reject))}_RequestPermission(id){const api=this._GetPermissionAPI();return new Promise((resolve,reject)=>api["requestPermission"](this._MapPermissionID(api,
id),status=>resolve(!!status["hasPermission"]),reject))}async RequestPermissions(permissions){if(this.GetExportType()!=="cordova")return true;if(this.IsiOSCordova())return true;for(const id of permissions){const alreadyGranted=await this._HasPermission(id);if(alreadyGranted)continue;const granted=await this._RequestPermission(id);if(granted===false)return false}return true}async RequirePermissions(...permissions){if(await this.RequestPermissions(permissions)===false)throw new Error("Permission not granted");
}_OnWrapperMessage(msg,additionalObjects){if(msg==="entered-fullscreen"){RuntimeInterface._SetWrapperIsFullscreenFlag(true);this._runtimeDomHandler._OnFullscreenChange()}else if(msg==="exited-fullscreen"){RuntimeInterface._SetWrapperIsFullscreenFlag(false);this._runtimeDomHandler._OnFullscreenChange()}else if(typeof msg==="object"){const type=msg["type"];if(type==="directory-handles")this._directoryHandles=additionalObjects;else if(type==="wrapper-init-response"){this._wrapperInitResolve(msg);this._wrapperInitResolve=
null}else if(type==="extension-message")this.PostToRuntimeComponent("runtime","wrapper-extension-message",msg);else console.warn("Unknown wrapper message: ",msg)}else console.warn("Unknown wrapper message: ",msg)}_OnSendWrapperExtensionMessage(data){this._SendWrapperMessage({"type":"extension-message","componentId":data["componentId"],"messageId":data["messageId"],"params":data["params"]||[],"asyncId":data["asyncId"]})}_SendWrapperMessage(o){if(this.IsAnyWebView2Wrapper())window["chrome"]["webview"]["postMessage"](JSON.stringify(o));
else if(this._exportType==="macos-wkwebview")window["webkit"]["messageHandlers"]["C3Wrapper"]["postMessage"](JSON.stringify(o));else;}_SetupWebView2Polyfills(){window.moveTo=(x,y)=>{this._SendWrapperMessage({"type":"set-window-position","windowX":Math.ceil(x),"windowY":Math.ceil(y)})};window.resizeTo=(w,h)=>{this._SendWrapperMessage({"type":"set-window-size","windowWidth":Math.ceil(w),"windowHeight":Math.ceil(h)})}}_InitWrapper(){if(!this.IsAnyWebView2Wrapper())return Promise.resolve();return new Promise(resolve=>
{this._wrapperInitResolve=resolve;this._SendWrapperMessage({"type":"wrapper-init"})})}_GetDirectoryHandles(){return this._directoryHandles}async _ConvertDataUrisToBlobs(){const promises=[];for(const [filename,data]of Object.entries(this._localFileBlobs))promises.push(this._ConvertDataUriToBlobs(filename,data));await Promise.all(promises)}async _ConvertDataUriToBlobs(filename,data){if(typeof data==="object"){this._localFileBlobs[filename]=new Blob([data["str"]],{"type":data["type"]});this._localFileStrings[filename]=
data["str"]}else{let blob=await this._FetchDataUri(data);if(!blob)blob=this._DataURIToBinaryBlobSync(data);this._localFileBlobs[filename]=blob}}async _FetchDataUri(dataUri){try{const response=await fetch(dataUri);return await response.blob()}catch(err){console.warn("Failed to fetch a data: URI. Falling back to a slower workaround. This is probably because the Content Security Policy unnecessarily blocked it. Allow data: URIs in your CSP to avoid this.",err);return null}}_DataURIToBinaryBlobSync(datauri){const o=
this._ParseDataURI(datauri);return this._BinaryStringToBlob(o.data,o.mime_type)}_ParseDataURI(datauri){const comma=datauri.indexOf(",");if(comma<0)throw new URIError("expected comma in data: uri");const typepart=datauri.substring(5,comma);const datapart=datauri.substring(comma+1);const typearr=typepart.split(";");const mimetype=typearr[0]||"";const encoding1=typearr[1];const encoding2=typearr[2];let decodeddata;if(encoding1==="base64"||encoding2==="base64")decodeddata=atob(datapart);else decodeddata=
decodeURIComponent(datapart);return{mime_type:mimetype,data:decodeddata}}_BinaryStringToBlob(binstr,mime_type){let len=binstr.length;let len32=len>>2;let a8=new Uint8Array(len);let a32=new Uint32Array(a8.buffer,0,len32);let i,j;for(i=0,j=0;i<len32;++i)a32[i]=binstr.charCodeAt(j++)|binstr.charCodeAt(j++)<<8|binstr.charCodeAt(j++)<<16|binstr.charCodeAt(j++)<<24;let tailLength=len&3;while(tailLength--){a8[j]=binstr.charCodeAt(j);++j}return new Blob([a8],{"type":mime_type})}}};


// workers/runtimeDomEvents.js
'use strict';{const RuntimeInterface=self.RuntimeInterface;function IsCompatibilityMouseEvent(e){return e["sourceCapabilities"]&&e["sourceCapabilities"]["firesTouchEvents"]||e["originalEvent"]&&e["originalEvent"]["sourceCapabilities"]&&e["originalEvent"]["sourceCapabilities"]["firesTouchEvents"]}const KEY_CODE_ALIASES=new Map([["OSLeft","MetaLeft"],["OSRight","MetaRight"]]);const DISPATCH_RUNTIME_AND_SCRIPT={"dispatchRuntimeEvent":true,"dispatchUserScriptEvent":true};const DISPATCH_SCRIPT_ONLY={"dispatchUserScriptEvent":true};
const DISPATCH_RUNTIME_ONLY={"dispatchRuntimeEvent":true};function AddStyleSheet(cssUrl){return new Promise((resolve,reject)=>{const styleLink=document.createElement("link");styleLink.onload=()=>resolve(styleLink);styleLink.onerror=err=>reject(err);styleLink.rel="stylesheet";styleLink.href=cssUrl;document.head.appendChild(styleLink)})}function FetchImage(url){return new Promise((resolve,reject)=>{const img=new Image;img.onload=()=>resolve(img);img.onerror=err=>reject(err);img.src=url})}async function BlobToImage(blob){const blobUrl=
URL.createObjectURL(blob);try{return await FetchImage(blobUrl)}finally{URL.revokeObjectURL(blobUrl)}}function BlobToString(blob){return new Promise((resolve,reject)=>{let fileReader=new FileReader;fileReader.onload=e=>resolve(e.target.result);fileReader.onerror=err=>reject(err);fileReader.readAsText(blob)})}function IsInContentEditable(el){do{if(el.parentNode&&el.hasAttribute("contenteditable"))return true;el=el.parentNode}while(el);return false}const keyboardInputElementTagNames=new Set(["input",
"textarea","datalist","select"]);function IsKeyboardInputElement(elem){return keyboardInputElementTagNames.has(elem.tagName.toLowerCase())||IsInContentEditable(elem)}const canvasOrDocTags=new Set(["canvas","body","html"]);function PreventDefaultOnCanvasOrDoc(e){if(!e.target.tagName)return;const tagName=e.target.tagName.toLowerCase();if(canvasOrDocTags.has(tagName))e.preventDefault()}function PreventDefaultOnHTMLWrap(e){if(!e.target.tagName)return;if(e.target.classList.contains("c3htmlwrap"))e.preventDefault()}
function BlockWheelZoom(e){if(e.metaKey||e.ctrlKey)e.preventDefault()}self["C3_GetSvgImageSize"]=async function(blob){const img=await BlobToImage(blob);if(img.width>0&&img.height>0)return[img.width,img.height];else{img.style.position="absolute";img.style.left="0px";img.style.top="0px";img.style.visibility="hidden";document.body.appendChild(img);const rc=img.getBoundingClientRect();document.body.removeChild(img);return[rc.width,rc.height]}};self["C3_RasterSvgImageBlob"]=async function(blob,imageWidth,
imageHeight,surfaceWidth,surfaceHeight){const img=await BlobToImage(blob);const canvas=document.createElement("canvas");canvas.width=surfaceWidth;canvas.height=surfaceHeight;const ctx=canvas.getContext("2d");ctx.drawImage(img,0,0,imageWidth,imageHeight);return canvas};let isCordovaPaused=false;document.addEventListener("pause",()=>isCordovaPaused=true);document.addEventListener("resume",()=>isCordovaPaused=false);function ParentHasFocus(){try{return window.parent&&window.parent.document.hasFocus()}catch(err){return false}}
const DOM_COMPONENT_ID="runtime";const HANDLER_CLASS=class RuntimeDOMHandler extends self.DOMHandler{constructor(iRuntime){super(iRuntime,DOM_COMPONENT_ID);this._enableWindowResizeEvent=false;this._simulatedResizeTimerId=-1;this._targetOrientation="any";this._attachedDeviceOrientationEvent=false;this._attachedDeviceMotionEvent=false;this._pageVisibilityIsHidden=false;this._screenReaderTextWrap=document.createElement("div");this._screenReaderTextWrap.className="c3-screen-reader-text";this._screenReaderTextWrap.setAttribute("aria-live",
"polite");document.body.appendChild(this._screenReaderTextWrap);this._debugHighlightElem=null;this._isExportToVideo=false;this._exportVideoProgressMessage="";this._exportVideoUpdateTimerId=-1;this._enableAndroidVKDetection=false;this._lastWindowWidth=iRuntime._GetWindowInnerWidth();this._lastWindowHeight=iRuntime._GetWindowInnerHeight();this._virtualKeyboardHeight=0;this._vkTranslateYOffset=0;iRuntime.AddRuntimeComponentMessageHandler("runtime","invoke-download",e=>this._OnInvokeDownload(e));iRuntime.AddRuntimeComponentMessageHandler("runtime",
"load-webfonts",e=>this._OnLoadWebFonts(e));iRuntime.AddRuntimeComponentMessageHandler("runtime","raster-svg-image",e=>this._OnRasterSvgImage(e));iRuntime.AddRuntimeComponentMessageHandler("runtime","get-svg-image-size",e=>this._OnGetSvgImageSize(e));iRuntime.AddRuntimeComponentMessageHandler("runtime","set-target-orientation",e=>this._OnSetTargetOrientation(e));iRuntime.AddRuntimeComponentMessageHandler("runtime","register-sw",()=>this._OnRegisterSW());iRuntime.AddRuntimeComponentMessageHandler("runtime",
"post-to-debugger",e=>this._OnPostToDebugger(e));iRuntime.AddRuntimeComponentMessageHandler("runtime","go-to-script",e=>this._OnPostToDebugger(e));iRuntime.AddRuntimeComponentMessageHandler("runtime","before-start-ticking",()=>this._OnBeforeStartTicking());iRuntime.AddRuntimeComponentMessageHandler("runtime","debug-highlight",e=>this._OnDebugHighlight(e));iRuntime.AddRuntimeComponentMessageHandler("runtime","enable-device-orientation",()=>this._AttachDeviceOrientationEvent());iRuntime.AddRuntimeComponentMessageHandler("runtime",
"enable-device-motion",()=>this._AttachDeviceMotionEvent());iRuntime.AddRuntimeComponentMessageHandler("runtime","add-stylesheet",e=>this._OnAddStylesheet(e));iRuntime.AddRuntimeComponentMessageHandler("runtime","script-create-worker",e=>this._OnScriptCreateWorker(e));iRuntime.AddRuntimeComponentMessageHandler("runtime","alert",e=>this._OnAlert(e));iRuntime.AddRuntimeComponentMessageHandler("runtime","screen-reader-text",e=>this._OnScreenReaderTextEvent(e));iRuntime.AddRuntimeComponentMessageHandler("runtime",
"hide-cordova-splash",()=>this._OnHideCordovaSplash());iRuntime.AddRuntimeComponentMessageHandler("runtime","set-exporting-to-video",e=>this._SetExportingToVideo(e));iRuntime.AddRuntimeComponentMessageHandler("runtime","export-to-video-progress",e=>this._OnExportVideoProgress(e));iRuntime.AddRuntimeComponentMessageHandler("runtime","exported-to-video",e=>this._OnExportedToVideo(e));iRuntime.AddRuntimeComponentMessageHandler("runtime","exported-to-image-sequence",e=>this._OnExportedToImageSequence(e));
const allowDefaultContextMenuTagNames=new Set(["input","textarea","datalist"]);window.addEventListener("contextmenu",e=>{const t=e.target;const name=t.tagName.toLowerCase();if(!allowDefaultContextMenuTagNames.has(name)&&!IsInContentEditable(t))e.preventDefault()});window.addEventListener("selectstart",PreventDefaultOnCanvasOrDoc);window.addEventListener("gesturehold",PreventDefaultOnCanvasOrDoc);window.addEventListener("touchstart",PreventDefaultOnCanvasOrDoc,{"passive":false});window.addEventListener("pointerdown",
PreventDefaultOnCanvasOrDoc,{"passive":false});this._mousePointerLastButtons=0;window.addEventListener("mousedown",e=>{if(e.button===1)e.preventDefault()});window.addEventListener("mousewheel",BlockWheelZoom,{"passive":false});window.addEventListener("wheel",BlockWheelZoom,{"passive":false});window.addEventListener("resize",()=>this._OnWindowResize());window.addEventListener("fullscreenchange",()=>this._OnFullscreenChange());window.addEventListener("webkitfullscreenchange",()=>this._OnFullscreenChange());
window.addEventListener("mozfullscreenchange",()=>this._OnFullscreenChange());window.addEventListener("fullscreenerror",e=>this._OnFullscreenError(e));window.addEventListener("webkitfullscreenerror",e=>this._OnFullscreenError(e));window.addEventListener("mozfullscreenerror",e=>this._OnFullscreenError(e));if(iRuntime.IsiOSWebView()){let lastVisualViewportHeight=Infinity;window["visualViewport"].addEventListener("resize",()=>{const curVisualViewportHeight=window["visualViewport"].height;if(curVisualViewportHeight>
lastVisualViewportHeight){document.scrollingElement.scrollTop=0;document.scrollingElement.scrollLeft=0}lastVisualViewportHeight=curVisualViewportHeight});document.documentElement.setAttribute("ioswebview","")}this._mediaPendingPlay=new Set;this._mediaRemovedPendingPlay=new WeakSet;this._isSilent=false}_AddDefaultCanvasEventHandlers(canvas){canvas.addEventListener("selectstart",PreventDefaultOnCanvasOrDoc);canvas.addEventListener("gesturehold",PreventDefaultOnCanvasOrDoc);canvas.addEventListener("pointerdown",
PreventDefaultOnCanvasOrDoc)}_AddDefaultHTMLWrapEventHandlers(htmlwrap){htmlwrap.addEventListener("selectstart",PreventDefaultOnHTMLWrap);htmlwrap.addEventListener("gesturehold",PreventDefaultOnHTMLWrap);htmlwrap.addEventListener("touchstart",PreventDefaultOnHTMLWrap)}_OnBeforeStartTicking(){self.setTimeout(()=>{this._enableAndroidVKDetection=true},1E3);if(this._iRuntime.GetExportType()==="cordova"){document.addEventListener("pause",()=>this._OnVisibilityChange(true));document.addEventListener("resume",
()=>this._OnVisibilityChange(false))}else document.addEventListener("visibilitychange",()=>this._OnVisibilityChange(document.visibilityState==="hidden"));this._pageVisibilityIsHidden=!!(document.visibilityState==="hidden"||isCordovaPaused);return{"isSuspended":this._pageVisibilityIsHidden}}Attach(){window.addEventListener("focus",()=>this._PostRuntimeEvent("window-focus"));window.addEventListener("blur",()=>{this._PostRuntimeEvent("window-blur",{"parentHasFocus":ParentHasFocus()});this._mousePointerLastButtons=
0});window.addEventListener("focusin",e=>{if(IsKeyboardInputElement(e.target))this._PostRuntimeEvent("keyboard-blur")});window.addEventListener("keydown",e=>this._OnKeyEvent("keydown",e));window.addEventListener("keyup",e=>this._OnKeyEvent("keyup",e));window.addEventListener("mousedown",e=>this._OnMouseEvent("mousedown",e,DISPATCH_SCRIPT_ONLY));window.addEventListener("mousemove",e=>this._OnMouseEvent("mousemove",e,DISPATCH_SCRIPT_ONLY));window.addEventListener("mouseup",e=>this._OnMouseEvent("mouseup",
e,DISPATCH_SCRIPT_ONLY));window.addEventListener("dblclick",e=>this._OnMouseEvent("dblclick",e,DISPATCH_RUNTIME_AND_SCRIPT));window.addEventListener("wheel",e=>this._OnMouseWheelEvent("wheel",e,DISPATCH_RUNTIME_AND_SCRIPT));window.addEventListener("pointerdown",e=>{this._HandlePointerDownFocus(e);this._OnPointerEvent("pointerdown",e)});if(this._iRuntime.UsesWorker()&&typeof window["onpointerrawupdate"]!=="undefined"&&self===self.top)window.addEventListener("pointerrawupdate",e=>this._OnPointerRawUpdate(e));
else window.addEventListener("pointermove",e=>this._OnPointerEvent("pointermove",e));window.addEventListener("pointerup",e=>this._OnPointerEvent("pointerup",e));window.addEventListener("pointercancel",e=>this._OnPointerEvent("pointercancel",e));const playFunc=()=>this._PlayPendingMedia();window.addEventListener("pointerup",playFunc,true);window.addEventListener("touchend",playFunc,true);window.addEventListener("click",playFunc,true);window.addEventListener("keydown",playFunc,true);window.addEventListener("gamepadconnected",
playFunc,true);if(this._iRuntime.IsAndroid()&&!this._iRuntime.IsAndroidWebView()&&navigator["virtualKeyboard"]){navigator["virtualKeyboard"]["overlaysContent"]=true;navigator["virtualKeyboard"].addEventListener("geometrychange",()=>{this._OnAndroidVirtualKeyboardChange(this._GetWindowInnerHeight(),navigator["virtualKeyboard"]["boundingRect"]["height"])})}if(this._iRuntime.IsiOSWebView()){document.scrollingElement.scrollTop=0;document.scrollingElement.scrollLeft=0}}_OnAndroidVirtualKeyboardChange(windowHeight,
vkHeight){document.body.style.position="";document.body.style.overflow="";document.body.style.transform="";this._vkTranslateYOffset=0;if(vkHeight>0){const activeElement=document.activeElement;if(activeElement){const rc=activeElement.getBoundingClientRect();const rcMidY=(rc.top+rc.bottom)/2;const targetY=(windowHeight-vkHeight)/2;let shiftY=rcMidY-targetY;if(shiftY>vkHeight)shiftY=vkHeight;if(shiftY<0)shiftY=0;if(shiftY>0){document.body.style.position="absolute";document.body.style.overflow="visible";
document.body.style.transform=`translateY(${-shiftY}px)`;this._vkTranslateYOffset=shiftY}}}}_PostRuntimeEvent(name,data){this.PostToRuntime(name,data||null,DISPATCH_RUNTIME_ONLY)}_GetWindowInnerWidth(){return this._iRuntime._GetWindowInnerWidth()}_GetWindowInnerHeight(){return this._iRuntime._GetWindowInnerHeight()}_EnableWindowResizeEvent(){this._enableWindowResizeEvent=true;this._lastWindowWidth=this._iRuntime._GetWindowInnerWidth();this._lastWindowHeight=this._iRuntime._GetWindowInnerHeight()}_OnWindowResize(){if(this._isExportToVideo)return;
if(!this._enableWindowResizeEvent)return;const width=this._GetWindowInnerWidth();const height=this._GetWindowInnerHeight();if(this._iRuntime.IsAndroidWebView())if(this._enableAndroidVKDetection)if(this._lastWindowWidth===width&&height<this._lastWindowHeight){this._virtualKeyboardHeight=this._lastWindowHeight-height;this._OnAndroidVirtualKeyboardChange(this._lastWindowHeight,this._virtualKeyboardHeight);return}else{if(this._virtualKeyboardHeight>0){this._virtualKeyboardHeight=0;this._OnAndroidVirtualKeyboardChange(height,
this._virtualKeyboardHeight)}this._lastWindowWidth=width;this._lastWindowHeight=height}else{this._lastWindowWidth=width;this._lastWindowHeight=height}this.PostToRuntime("window-resize",{"innerWidth":width,"innerHeight":height,"devicePixelRatio":window.devicePixelRatio,"isFullscreen":RuntimeInterface.IsDocumentFullscreen(),"cssDisplayMode":this._iRuntime.GetCssDisplayMode()});if(this._iRuntime.IsiOSWebView()){if(this._simulatedResizeTimerId!==-1)clearTimeout(this._simulatedResizeTimerId);this._OnSimulatedResize(width,
height,0)}}_ScheduleSimulatedResize(width,height,count){if(this._simulatedResizeTimerId!==-1)clearTimeout(this._simulatedResizeTimerId);this._simulatedResizeTimerId=setTimeout(()=>this._OnSimulatedResize(width,height,count),48)}_OnSimulatedResize(originalWidth,originalHeight,count){const width=this._GetWindowInnerWidth();const height=this._GetWindowInnerHeight();this._simulatedResizeTimerId=-1;if(width!=originalWidth||height!=originalHeight)this.PostToRuntime("window-resize",{"innerWidth":width,"innerHeight":height,
"devicePixelRatio":window.devicePixelRatio,"isFullscreen":RuntimeInterface.IsDocumentFullscreen(),"cssDisplayMode":this._iRuntime.GetCssDisplayMode()});else if(count<10)this._ScheduleSimulatedResize(width,height,count+1)}_OnSetTargetOrientation(e){this._targetOrientation=e["targetOrientation"]}_TrySetTargetOrientation(){const orientation=this._targetOrientation;if(screen["orientation"]&&screen["orientation"]["lock"])screen["orientation"]["lock"](orientation).catch(err=>console.warn("[Construct] Failed to lock orientation: ",
err));else try{let result=false;if(screen["lockOrientation"])result=screen["lockOrientation"](orientation);else if(screen["webkitLockOrientation"])result=screen["webkitLockOrientation"](orientation);else if(screen["mozLockOrientation"])result=screen["mozLockOrientation"](orientation);else if(screen["msLockOrientation"])result=screen["msLockOrientation"](orientation);if(!result)console.warn("[Construct] Failed to lock orientation")}catch(err){console.warn("[Construct] Failed to lock orientation: ",
err)}}_OnFullscreenChange(){if(this._isExportToVideo)return;const isDocFullscreen=RuntimeInterface.IsDocumentFullscreen();if(isDocFullscreen&&this._targetOrientation!=="any")this._TrySetTargetOrientation();this.PostToRuntime("fullscreenchange",{"isFullscreen":isDocFullscreen,"innerWidth":this._GetWindowInnerWidth(),"innerHeight":this._GetWindowInnerHeight()})}_OnFullscreenError(e){console.warn("[Construct] Fullscreen request failed: ",e);this.PostToRuntime("fullscreenerror",{"isFullscreen":RuntimeInterface.IsDocumentFullscreen(),
"innerWidth":this._GetWindowInnerWidth(),"innerHeight":this._GetWindowInnerHeight()})}_OnVisibilityChange(isHidden){if(this._pageVisibilityIsHidden===isHidden)return;this._pageVisibilityIsHidden=isHidden;if(isHidden)this._iRuntime._CancelAnimationFrame();else this._iRuntime._RequestAnimationFrame();this.PostToRuntime("visibilitychange",{"hidden":isHidden});if(!isHidden&&this._iRuntime.IsiOSWebView()){const resetScrollFunc=()=>{document.scrollingElement.scrollTop=0;document.scrollingElement.scrollLeft=
0};setTimeout(resetScrollFunc,50);setTimeout(resetScrollFunc,100);setTimeout(resetScrollFunc,250);setTimeout(resetScrollFunc,500)}}_OnKeyEvent(name,e){if(typeof e.key==="undefined")return;if(e.key==="Backspace")PreventDefaultOnCanvasOrDoc(e);if(this._iRuntime.GetExportType()==="nwjs"&&e.key==="u"&&(e.ctrlKey||e.metaKey))e.preventDefault();if(this._isExportToVideo)return;const code=KEY_CODE_ALIASES.get(e.code)||e.code;this._PostToRuntimeMaybeSync(name,{"code":code,"key":e.key,"which":e.which,"repeat":e.repeat,
"altKey":e.altKey,"ctrlKey":e.ctrlKey,"metaKey":e.metaKey,"shiftKey":e.shiftKey,"timeStamp":e.timeStamp},DISPATCH_RUNTIME_AND_SCRIPT)}_OnMouseWheelEvent(name,e,opts){if(this._isExportToVideo)return;this.PostToRuntime(name,{"clientX":e.clientX,"clientY":e.clientY+this._vkTranslateYOffset,"pageX":e.pageX,"pageY":e.pageY+this._vkTranslateYOffset,"deltaX":e.deltaX,"deltaY":e.deltaY,"deltaZ":e.deltaZ,"deltaMode":e.deltaMode,"timeStamp":e.timeStamp},opts)}_OnMouseEvent(name,e,opts){if(this._isExportToVideo)return;
if(IsCompatibilityMouseEvent(e))return;this._PostToRuntimeMaybeSync(name,{"button":e.button,"buttons":e.buttons,"clientX":e.clientX,"clientY":e.clientY+this._vkTranslateYOffset,"pageX":e.pageX,"pageY":e.pageY+this._vkTranslateYOffset,"movementX":e.movementX||0,"movementY":e.movementY||0,"timeStamp":e.timeStamp},opts)}_OnPointerEvent(name,e){if(this._isExportToVideo)return;let lastButtons=0;if(e.pointerType==="mouse")lastButtons=this._mousePointerLastButtons;this._PostToRuntimeMaybeSync(name,{"pointerId":e.pointerId,
"pointerType":e.pointerType,"button":e.button,"buttons":e.buttons,"lastButtons":lastButtons,"clientX":e.clientX,"clientY":e.clientY+this._vkTranslateYOffset,"pageX":e.pageX,"pageY":e.pageY+this._vkTranslateYOffset,"movementX":e.movementX||0,"movementY":e.movementY||0,"width":e.width||0,"height":e.height||0,"pressure":e.pressure||0,"tangentialPressure":e["tangentialPressure"]||0,"tiltX":e.tiltX||0,"tiltY":e.tiltY||0,"twist":e["twist"]||0,"timeStamp":e.timeStamp},DISPATCH_RUNTIME_AND_SCRIPT);if(e.pointerType===
"mouse")this._mousePointerLastButtons=e.buttons}_OnPointerRawUpdate(e){this._OnPointerEvent("pointermove",e)}_OnTouchEvent(fireName,e){if(this._isExportToVideo)return;for(let i=0,len=e.changedTouches.length;i<len;++i){const t=e.changedTouches[i];this._PostToRuntimeMaybeSync(fireName,{"pointerId":t.identifier,"pointerType":"touch","button":0,"buttons":0,"lastButtons":0,"clientX":t.clientX,"clientY":t.clientY+this._vkTranslateYOffset,"pageX":t.pageX,"pageY":t.pageY+this._vkTranslateYOffset,"movementX":e.movementX||
0,"movementY":e.movementY||0,"width":(t["radiusX"]||t["webkitRadiusX"]||0)*2,"height":(t["radiusY"]||t["webkitRadiusY"]||0)*2,"pressure":t["force"]||t["webkitForce"]||0,"tangentialPressure":0,"tiltX":0,"tiltY":0,"twist":t["rotationAngle"]||0,"timeStamp":e.timeStamp},DISPATCH_RUNTIME_AND_SCRIPT)}}_HandlePointerDownFocus(e){if(window!==window.top)window.focus();if(this._IsElementCanvasOrDocument(e.target)&&document.activeElement&&!this._IsElementCanvasOrDocument(document.activeElement))document.activeElement.blur()}_IsElementCanvasOrDocument(elem){return!elem||
elem===document||elem===window||elem===document.body||elem.tagName.toLowerCase()==="canvas"}_AttachDeviceOrientationEvent(){if(this._attachedDeviceOrientationEvent)return;this._attachedDeviceOrientationEvent=true;window.addEventListener("deviceorientation",e=>this._OnDeviceOrientation(e));window.addEventListener("deviceorientationabsolute",e=>this._OnDeviceOrientationAbsolute(e))}_AttachDeviceMotionEvent(){if(this._attachedDeviceMotionEvent)return;this._attachedDeviceMotionEvent=true;window.addEventListener("devicemotion",
e=>this._OnDeviceMotion(e))}_OnDeviceOrientation(e){if(this._isExportToVideo)return;this.PostToRuntime("deviceorientation",{"absolute":!!e["absolute"],"alpha":e["alpha"]||0,"beta":e["beta"]||0,"gamma":e["gamma"]||0,"timeStamp":e.timeStamp,"webkitCompassHeading":e["webkitCompassHeading"],"webkitCompassAccuracy":e["webkitCompassAccuracy"]},DISPATCH_RUNTIME_AND_SCRIPT)}_OnDeviceOrientationAbsolute(e){if(this._isExportToVideo)return;this.PostToRuntime("deviceorientationabsolute",{"absolute":!!e["absolute"],
"alpha":e["alpha"]||0,"beta":e["beta"]||0,"gamma":e["gamma"]||0,"timeStamp":e.timeStamp},DISPATCH_RUNTIME_AND_SCRIPT)}_OnDeviceMotion(e){if(this._isExportToVideo)return;let accProp=null;const acc=e["acceleration"];if(acc)accProp={"x":acc["x"]||0,"y":acc["y"]||0,"z":acc["z"]||0};let withGProp=null;const withG=e["accelerationIncludingGravity"];if(withG)withGProp={"x":withG["x"]||0,"y":withG["y"]||0,"z":withG["z"]||0};let rotationRateProp=null;const rotationRate=e["rotationRate"];if(rotationRate)rotationRateProp=
{"alpha":rotationRate["alpha"]||0,"beta":rotationRate["beta"]||0,"gamma":rotationRate["gamma"]||0};this.PostToRuntime("devicemotion",{"acceleration":accProp,"accelerationIncludingGravity":withGProp,"rotationRate":rotationRateProp,"interval":e["interval"],"timeStamp":e.timeStamp},DISPATCH_RUNTIME_AND_SCRIPT)}_OnInvokeDownload(e){const url=e["url"];const filename=e["filename"];const a=document.createElement("a");const body=document.body;a.textContent=filename;a.href=url;a.download=filename;body.appendChild(a);
a.click();body.removeChild(a)}async _OnLoadWebFonts(e){const webfonts=e["webfonts"];await Promise.all(webfonts.map(async info=>{const fontFace=new FontFace(info.name,`url('${info.url}')`);document.fonts.add(fontFace);await fontFace.load()}))}async _OnRasterSvgImage(e){const blob=e["blob"];const imageWidth=e["imageWidth"];const imageHeight=e["imageHeight"];const surfaceWidth=e["surfaceWidth"];const surfaceHeight=e["surfaceHeight"];const imageBitmapOpts=e["imageBitmapOpts"];const canvas=await self["C3_RasterSvgImageBlob"](blob,
imageWidth,imageHeight,surfaceWidth,surfaceHeight);let ret;if(imageBitmapOpts)ret=await createImageBitmap(canvas,imageBitmapOpts);else ret=await createImageBitmap(canvas);return{"imageBitmap":ret,"transferables":[ret]}}async _OnGetSvgImageSize(e){return await self["C3_GetSvgImageSize"](e["blob"])}async _OnAddStylesheet(e){await AddStyleSheet(e["url"])}_PlayPendingMedia(){const mediaToTryPlay=[...this._mediaPendingPlay];this._mediaPendingPlay.clear();if(!this._isSilent)for(const mediaElem of mediaToTryPlay){const playRet=
mediaElem.play();if(playRet)playRet.catch(err=>{if(!this._mediaRemovedPendingPlay.has(mediaElem))this._mediaPendingPlay.add(mediaElem)})}}TryPlayMedia(mediaElem){if(typeof mediaElem.play!=="function")throw new Error("missing play function");this._mediaRemovedPendingPlay.delete(mediaElem);let playRet;try{playRet=mediaElem.play()}catch(err){this._mediaPendingPlay.add(mediaElem);return}if(playRet)playRet.catch(err=>{if(!this._mediaRemovedPendingPlay.has(mediaElem))this._mediaPendingPlay.add(mediaElem)})}RemovePendingPlay(mediaElem){this._mediaPendingPlay.delete(mediaElem);
this._mediaRemovedPendingPlay.add(mediaElem)}SetSilent(s){this._isSilent=!!s}_OnHideCordovaSplash(){if(navigator["splashscreen"]&&navigator["splashscreen"]["hide"])navigator["splashscreen"]["hide"]()}_OnDebugHighlight(e){const show=e["show"];if(!show){if(this._debugHighlightElem)this._debugHighlightElem.style.display="none";return}if(!this._debugHighlightElem){this._debugHighlightElem=document.createElement("div");this._debugHighlightElem.id="inspectOutline";document.body.appendChild(this._debugHighlightElem)}const elem=
this._debugHighlightElem;elem.style.display="";elem.style.left=e["left"]-1+"px";elem.style.top=e["top"]-1+"px";elem.style.width=e["width"]+2+"px";elem.style.height=e["height"]+2+"px";elem.textContent=e["name"]}_OnRegisterSW(){if(window["C3_RegisterSW"])window["C3_RegisterSW"]()}_OnPostToDebugger(data){if(!window["c3_postToMessagePort"])return;data["from"]="runtime";window["c3_postToMessagePort"](data)}_InvokeFunctionFromJS(name,params){return this.PostToRuntimeAsync("js-invoke-function",{"name":name,
"params":params})}_OnScriptCreateWorker(e){const url=e["url"];const opts=e["opts"];const port2=e["port2"];const worker=new Worker(url,opts);worker.postMessage({"type":"construct-worker-init","port2":port2},[port2])}_OnAlert(e){alert(e["message"])}_OnScreenReaderTextEvent(e){const type=e["type"];if(type==="create"){const p=document.createElement("p");p.id="c3-sr-"+e["id"];p.textContent=e["text"];this._screenReaderTextWrap.appendChild(p)}else if(type==="update"){const p=document.getElementById("c3-sr-"+
e["id"]);if(p)p.textContent=e["text"];else console.warn(`[Construct] Missing screen reader text with id ${e["id"]}`)}else if(type==="release"){const p=document.getElementById("c3-sr-"+e["id"]);if(p)p.remove();else console.warn(`[Construct] Missing screen reader text with id ${e["id"]}`)}else console.warn(`[Construct] Unknown screen reader text update '${type}'`)}_SetExportingToVideo(e){this._isExportToVideo=true;const headerElem=document.createElement("h1");headerElem.id="exportToVideoMessage";headerElem.textContent=
e["message"];document.body.prepend(headerElem);document.body.classList.add("exportingToVideo");this.GetRuntimeInterface().GetMainCanvas().style.display="";this._iRuntime.SetIsExportingToVideo(e["duration"])}_OnExportVideoProgress(e){this._exportVideoProgressMessage=e["message"];if(this._exportVideoUpdateTimerId===-1)this._exportVideoUpdateTimerId=setTimeout(()=>this._DoUpdateExportVideoProgressMessage(),250)}_DoUpdateExportVideoProgressMessage(){this._exportVideoUpdateTimerId=-1;const headerElem=
document.getElementById("exportToVideoMessage");if(headerElem)headerElem.textContent=this._exportVideoProgressMessage}_OnExportedToVideo(e){window.c3_postToMessagePort({"type":"exported-video","arrayBuffer":e["arrayBuffer"],"contentType":e["contentType"],"time":e["time"]})}_OnExportedToImageSequence(e){window.c3_postToMessagePort({"type":"exported-image-sequence","blobArr":e["blobArr"],"time":e["time"],"gif":e["gif"]})}};RuntimeInterface.AddDOMHandlerClass(HANDLER_CLASS)};


// workers/jobSchedulerDom.js
'use strict';{const DISPATCH_WORKER_SCRIPT_NAME="dispatchworker.js";const JOB_WORKER_SCRIPT_NAME="jobworker.js";self.JobSchedulerDOM=class JobSchedulerDOM{constructor(runtimeInterface){this._runtimeInterface=runtimeInterface;this._maxNumWorkers=Math.min(navigator.hardwareConcurrency||2,16);this._dispatchWorker=null;this._jobWorkers=[];this._inputPort=null;this._outputPort=null}async Init(){if(this._hasInitialised)throw new Error("already initialised");this._hasInitialised=true;const dispatchWorkerScriptUrl=
this._runtimeInterface.GetScriptFolder()+DISPATCH_WORKER_SCRIPT_NAME;this._dispatchWorker=await this._runtimeInterface.CreateWorker(dispatchWorkerScriptUrl,{name:"DispatchWorker"});const messageChannel=new MessageChannel;this._inputPort=messageChannel.port1;this._dispatchWorker.postMessage({"type":"_init","in-port":messageChannel.port2},[messageChannel.port2]);this._outputPort=await this._CreateJobWorker()}async _CreateJobWorker(){const number=this._jobWorkers.length;const jobWorkerScriptUrl=this._runtimeInterface.GetScriptFolder()+
JOB_WORKER_SCRIPT_NAME;const jobWorker=await this._runtimeInterface.CreateWorker(jobWorkerScriptUrl,{name:"JobWorker"+number});const dispatchChannel=new MessageChannel;const outputChannel=new MessageChannel;this._dispatchWorker.postMessage({"type":"_addJobWorker","port":dispatchChannel.port1},[dispatchChannel.port1]);jobWorker.postMessage({"type":"init","number":number,"dispatch-port":dispatchChannel.port2,"output-port":outputChannel.port2},[dispatchChannel.port2,outputChannel.port2]);this._jobWorkers.push(jobWorker);
return outputChannel.port1}GetPortData(){return{"inputPort":this._inputPort,"outputPort":this._outputPort,"maxNumWorkers":this._maxNumWorkers}}GetPortTransferables(){return[this._inputPort,this._outputPort]}}};


// scripts/plugins/Touch/dom/domSide.js
'use strict';{const DOM_COMPONENT_ID="touch";const HANDLER_CLASS=class TouchDOMHandler extends self.DOMHandler{constructor(iRuntime){super(iRuntime,DOM_COMPONENT_ID);this.AddRuntimeMessageHandler("request-permission",e=>this._OnRequestPermission(e))}async _OnRequestPermission(e){const type=e["type"];let result=true;if(type===0)result=await this._RequestOrientationPermission();else if(type===1)result=await this._RequestMotionPermission();this.PostToRuntime("permission-result",{"type":type,"result":result})}async _RequestOrientationPermission(){if(!self["DeviceOrientationEvent"]||
!self["DeviceOrientationEvent"]["requestPermission"])return true;try{const state=await self["DeviceOrientationEvent"]["requestPermission"]();return state==="granted"}catch(err){console.warn("[Touch] Failed to request orientation permission: ",err);return false}}async _RequestMotionPermission(){if(!self["DeviceMotionEvent"]||!self["DeviceMotionEvent"]["requestPermission"])return true;try{const state=await self["DeviceMotionEvent"]["requestPermission"]();return state==="granted"}catch(err){console.warn("[Touch] Failed to request motion permission: ",
err);return false}}};self.RuntimeInterface.AddDOMHandlerClass(HANDLER_CLASS)};


// scripts/plugins/Chadori_CloudSave/c3runtime/domSide.js
"use strict";

{
	const RuntimeInterface = self.RuntimeInterface;

	const DOM_COMPONENT_ID = "chadori-mobile-cloud-save";

	const HANDLER_CLASS = class CloudSave_Handler extends self.DOMElementHandler
	{
		constructor(iRuntime)
		{
			super(iRuntime, DOM_COMPONENT_ID);

			this.AddRuntimeMessageHandlers([
				["start-sdk", e=> this._StartSDK(...e)],

				["initialize", e => this._Initialize(...e)],

				["save", e => this._Save(...e)],
				["load", e => this._Load(...e)],
			]);

			// Addon properties
			this._isDebug = false;

			// Addon states
			this._isMobile = this._AreDOMDependenciesCleared();

			// DOM Reference
			this._CloudSave = null;
		}

		//////////////////////////////////////
        // Utility Methods
		_AreDOMDependenciesCleared()
		{
			if (typeof window["cordova"] === "undefined") { return false; }
			if (typeof window["cordova"]["plugin"] === "undefined") { return false; }
			if (typeof window["cordova"]["plugin"]["cloudsettings"] === "undefined") { return false; }
			return true;
		}

		_Log(str) { if (!this._isDebug) { return; } console.log("[Cloud Save]", str) }

		//////////////////////////////////////
        // Core Methods

		//////////////////////////////////////
        // DOM Callbacks
		_StartSDK(isDebugAllowed)
		{
			this._isDebug = isDebugAllowed;

			if (!this._isMobile) { this._Log("You need to export to mobile in order to run."); return; }

			this._CloudSave = window["cordova"]["plugin"]["cloudsettings"];

			this.PostToRuntime("on-mobile-sdk", []);
		}

		//////////////////////////////////////
        // Method Callbacks
		OnInitialized(hasRecorded)
		{
			this.PostToRuntime("on-initialized", [hasRecorded]);			
		}

		OnRestore()
		{
			this._Log("Concurrent update has been received, multiple user device detected.");
			this.PostToRuntime("on-update", []);			
		}

		OnDebugger()
		{
			this._Log("Native Debugger is now active!");
			this.PostToRuntime("on-debugger", []);			
		}

		OnSaveSuccess(data)
		{
			this.PostToRuntime("on-saved", [data]);		
		}

		OnSaveFailure(error)
		{
			this._Log(`Failed to save data: ${error}`);
			this.PostToRuntime("on-save-failed", [error]);	
		}

		OnLoadSuccess(data)
		{
			this.PostToRuntime("on-loaded", [data]);		
		}

		OnLoadFailure(error)
		{
			this._Log(`Failed to load data: ${error}`);
			this.PostToRuntime("on-load-failed", [error]);	
		}

		//////////////////////////////////////
        // DOM Methods
		_Initialize()
		{
			const ctx = this;

			this._CloudSave["exists"]((hasRecorded) => {
				ctx.OnInitialized(hasRecorded);
			});

			this._CloudSave["onRestore"](() => {
				ctx.OnRestore();
			});

			this._CloudSave["enableDebug"](() => {
				ctx.OnDebugger();
			});
		}

		_Save(_data, overwrite)
		{
			const ctx = this;

			this._CloudSave["save"](_data, 
				(data) => {
					ctx.OnSaveSuccess(data);
				},
				(error) => {
					ctx.OnSaveFailure(error);
				},
				overwrite
			);
		}

		_Load()
		{
			const ctx = this;

			this._CloudSave["load"]( 
				(data) => {
					ctx.OnLoadSuccess(data);
				},
				(error) => {
					ctx.OnLoadFailure(error);
			});
		}
	};
	
	RuntimeInterface.AddDOMHandlerClass(HANDLER_CLASS);
}

// scripts/plugins/Sparsha_FirestoreBasic/c3runtime/domside.js
"use strict";
{
    const DOM_COMPONENT_ID = "sparsha_firebase_firestorebasic";
    function StopPropagation(e) {
        e.stopPropagation();
    }
    const HANDLER_CLASS = class MyDOMHandler extends self.DOMHandler {
        constructor(iRuntime) {
            super(iRuntime, DOM_COMPONENT_ID);
            var self = this;

            async function DoAsync(e) {
                var RESULT = {
                    success: 0,
                };

                var firebase = globalThis.sparshaFirebase;
                var db = firebase.myFirestore[e.sdkName];

                if (e.action === "CustomSetDoc" || e.action === "UserSetDoc" || e.action === "UserSetLeaderboard" || e.action === "CustomIncrement" || e.action === "UserIncrement") {
                    var myDataObj = {};
                    //Set write Objects
                    if (e.action === "CustomSetDoc" || e.action === "UserSetDoc" || e.action === "UserSetLeaderboard") myDataObj = e.dataObj;
                    else {
                        e.replace = false;
                        for (var i = 0; i < e.fields.length; i++) {
                            myDataObj[e.fields[i]] = firebase.firestore.increment(e.increments[i]);
                        }
                    }
                    var mergeVal;
                    if(e.replace) mergeVal=false;
                    else mergeVal=true;
                    try {
                        await firebase.firestore.setDoc(firebase.firestore.doc(db, e.locationLink), myDataObj, { "merge": mergeVal });
                        RESULT.success = 1;
                    } catch (err) {
                        RESULT.success = 0;
                        RESULT.error = err;
                    }
                }
                else if (e.action === "CustomGetDoc" || e.action === "UserGetDoc") {
                    RESULT.readData = {};
                    if (e.sync === true) {
                        await FirebaseGetRead();
                        function FirebaseGetRead() {
                            return new Promise((resolve) => {
                                firebase._firestoreSyncSnaps[e.id] = firebase.firestore.onSnapshot(firebase.firestore.doc(db, e.locationLink), (docSnap) => {
                                    if (docSnap.exists()) {
                                        RESULT.success = 1;
                                        RESULT.noExist = 0;
                                        RESULT.readData = docSnap.data();
                                    } else {
                                        RESULT.success = 1;
                                        RESULT.noExist = 1;
                                    }
                                    RESULT.action = e.action;
                                    RESULT.id = e.id;
                                    RESULT.locationLink = e.locationLink;
                                    self.PostToRuntime("on_complete" + e.uid, RESULT);
                                    resolve()
                                }, (err) => {
                                    RESULT.success = 0;
                                    RESULT.error = err;

                                    RESULT.action = e.action;
                                    RESULT.id = e.id;
                                    RESULT.locationLink = e.locationLink;
                                    self.PostToRuntime("on_complete" + e.uid, RESULT);
                                    resolve()
                                });
                            });
                        }

                    }
                    else {
                        var isGotError = false;
                        const docSnap = await firebase.firestore.getDoc(firebase.firestore.doc(db, e.locationLink)).catch(function (err) {
                            RESULT.success = 0;
                            RESULT.error = err;
                            isGotError = true;
                        });

                        if (docSnap.exists()) {
                            RESULT.success = 1;
                            RESULT.noExist = 0;
                            RESULT.readData = docSnap.data();
                        }
                        else if (isGotError === false) {
                            RESULT.success = 1;
                            RESULT.noExist = 1;
                        }
                        RESULT.action = e.action;
                        RESULT.id = e.id;
                        RESULT.locationLink = e.locationLink;
                    }

                }
                else if (e.action === "CustomRemoveDoc" || e.action === "UserRemoveDoc") {
                    try {
                        await firebase.firestore.deleteDoc(firebase.firestore.doc(db, e.locationLink));
                        RESULT.success = 1;
                    } catch (err) {
                        RESULT.success = 0;
                        RESULT.error = err;
                    }
                }
                else if (e.action === "CustomRemoveField" || e.action === "UserRemoveField") {
                    var myObj = {};
                    for (var i = 0; i < e.fields.length; i++) {
                        myObj[e.fields[i]] = firebase.firestore.deleteField();
                    }
                    try {
                        await firebase.firestore.updateDoc(firebase.firestore.doc(db, e.locationLink), myObj);
                        RESULT.success = 1;
                    } catch (err) {
                        RESULT.success = 0;
                        RESULT.error = err;
                    }
                }
                else if (e.action === "CustomGetLeaderboard" || e.action === "UserGetLeaderboard") {
                    var query = firebase.firestore.query(firebase.firestore.collection(db, e.locationLink), firebase.firestore.orderBy(e.orderChild, "desc"), firebase.firestore.limit(e.size));

                    RESULT.readData = {};
                    if (e.sync === true) {
                        await FirebaseGetRead();
                        function FirebaseGetRead() {
                            return new Promise((resolve) => {
                                firebase._firestoreSyncSnaps[e.id] = firebase.firestore.onSnapshot(query, (docSnap) => {
                                    RESULT.success = 1;
                                    var counter = 0;
                                    var ArrJSON = [];
                                    docSnap.forEach((doc) => {
                                        var dataNow = doc.data();
                                        dataNow["~docName"] = doc.id;
                                        ArrJSON[counter] = dataNow;
                                        counter++;
                                    });
                                    if (counter === 0) RESULT.noExist = 1;
                                    else {
                                        RESULT.noExist = 0;
                                        RESULT.readData = ArrJSON;
                                    }
                                    RESULT.action = e.action;
                                    RESULT.id = e.id;
                                    RESULT.locationLink = e.locationLink;
                                    self.PostToRuntime("on_complete" + e.uid, RESULT);
                                    resolve();
                                }, (err) => {
                                    RESULT.success = 0;
                                    RESULT.error = err;

                                    RESULT.action = e.action;
                                    RESULT.id = e.id;
                                    RESULT.locationLink = e.locationLink;
                                    self.PostToRuntime("on_complete" + e.uid, RESULT);
                                    resolve()
                                });
                            });
                        }

                    }
                    else {
                        var isGotError = false;
                        const docSnap = await firebase.firestore.getDocs(query).catch(function (err) {
                            RESULT.success = 0;
                            RESULT.error = err;
                            isGotError = true;
                        });

                        if (isGotError === false) {
                            RESULT.success = 1;
                            var counter = 0;
                            var ArrJSON = [];
                            docSnap.forEach((doc) => {
                                var dataNow = doc.data();
                                dataNow["~docName"] = doc.id;
                                ArrJSON[counter] = dataNow;
                                counter++;
                            });
                            if (counter === 0) RESULT.noExist = 1;
                            else {
                                RESULT.noExist = 0;
                                RESULT.readData = ArrJSON;
                            }
                        }

                        RESULT.action = e.action;
                        RESULT.id = e.id;
                        RESULT.locationLink = e.locationLink;
                    }
                }


                return RESULT;
            }
            this.AddRuntimeMessageHandler("domAsync_sparsha_fFirstore", DoAsync);
        }
    };
    self.RuntimeInterface.AddDOMHandlerClass(HANDLER_CLASS);
}

// scripts/plugins/Sparsha_FirebaseSDK/c3runtime/domside.js
"use strict";
{
    const DOM_COMPONENT_ID = "sparsha_firebase_sdk";
    function StopPropagation(e) {
        e.stopPropagation();
    }
    const HANDLER_CLASS = class MyDOMHandler extends self.DOMHandler {
        constructor(iRuntime) {
            super(iRuntime, DOM_COMPONENT_ID);
            var self = this;

            async function DoAsync(e) {

            }

            function DoSync(e) {
                //action,sdkName,plugin_uid,recaptchatoken
                //remove_app,remove_auth,remove_database,remove_storage
                //enable_auth,enable_database,enable_storage,enable_appcheck
                //apiKey,projectId,databaseURL,messagingSenderId,appId,version
                //debug,autoLoad,tseconds
                var Result = {
                    action: e.action,
                    status: "none",
                    userBasic: {},
                    userPro: {},
                };
                var firebase = globalThis.sparshaFirebase;

                function returnData() {
                    self.PostToRuntime("run_sparsha_fSDK" + e.plugin_uid, Result)
                }

                if (e.action === "init" || e.action === "reconnect") {
                    function setAuthListener() {
                        var authExpBasic = {};
                        var authExpPro = {};
                        var myAuth = firebase.myAuth[e.sdkName];
                        if (firebase._loadedApp[e.sdkName] !== 1 || e.action === "reconnect") {
                            firebase.auth.onAuthStateChanged(myAuth, (user) => {
                                var authMapRes = firebase._GetAuthMapData(user, e.sdkName);
                                authExpBasic = authMapRes.authExpBasic;
                                authExpPro = authMapRes.authExpPro;
                                if (user) {
                                    if (e.debug) {
                                        console.log("LOGGED IN" + "\nsdkObject: " + e.sdkName + "\nuserID: " + authExpBasic["myUID"] + "\nprovider: " + authExpBasic["providerID"] + "\nemail: " + authExpBasic["myEmail"] + "\nisEmailVerified: " + authExpBasic["isEmailVerified"] + "\nusername: " + authExpBasic["username"] + "\nphone: " + authExpBasic["phoneNo"] + "\nphotoURL: " + authExpBasic["photoURL"] + "\n ");
                                    }
                                }
                                else {
                                    if (e.debug) console.log("LOGGED OUT" + "\nsdkObject: " + e.sdkName + "\n ");
                                }
                                Result.status = "success";
                                Result.userBasic = authExpBasic;
                                Result.userPro = authExpPro;
                                returnData();
                                authExpPro.TrigNotEvent=0;
                                firebase._loadedApp[e.sdkName] = 1;

                            });
                        }
                    }
                    function startInitApp(firebaseConfig) {
                        if (e.sdkName === firebase.mainSdkName) firebase.myApp[e.sdkName] = firebase.app.initializeApp(firebaseConfig);
                        else firebase.myApp[e.sdkName] = firebase.app.initializeApp(firebaseConfig, e.sdkName);

                        if (typeof firebase._res[e.sdkName] === "undefined") firebase._res[e.sdkName] = {};

                        if (e.enable_database) {
                            firebase.myDatabase[e.sdkName] = firebase.database.getDatabase(firebase.myApp[e.sdkName]);
                            if (firebase._dbDetailLog) firebase.database.enableLogging(true);
                        }
                        if (e.enable_firestore) firebase.myFirestore[e.sdkName] = firebase.firestore.getFirestore(firebase.myApp[e.sdkName]);
                        if (e.enable_storage) firebase.myStorage[e.sdkName] = firebase.storage.getStorage(firebase.myApp[e.sdkName]);
                        if (e.enable_analytics) firebase.myAnalytics[e.sdkName] = firebase.analytics.getAnalytics(firebase.myApp[e.sdkName]);
                        if (e.enable_remoteconfig) {
                            firebase.myRemoteConfig[e.sdkName] = firebase.remoteconfig.getRemoteConfig(firebase.myApp[e.sdkName]);
                            var remoteConfig = firebase.myRemoteConfig[e.sdkName];
                            remoteConfig.settings.minimumFetchIntervalMillis = e.remoteConfigTime * 1000;
                            remoteConfig.defaultConfig = e.remoteConfigDefault;
                        }
                        if (e.enable_performance) firebase.myPerformance[e.sdkName] = firebase.performance.getPerformance(firebase.myApp[e.sdkName]);
                        if (e.enable_appcheck) {
                        	var providerName="";
                        	if(e.captchaType===0) providerName="ReCaptchaEnterpriseProvider";
                        	else providerName= "ReCaptchaV3Provider";
                            firebase.myAppCheck[e.sdkName] = firebase.appcheck.initializeAppCheck(firebase.myApp[e.sdkName], {
                                provider: new firebase.appcheck[providerName](e.recaptchatoken),
                                isTokenAutoRefreshEnabled: e.autoRefCapToken
                            });
                        }
                        if (e.enable_auth) {
                            firebase.myAuth[e.sdkName] = firebase.auth.getAuth(firebase.myApp[e.sdkName]);
                            setAuthListener();
                        }
                        else {
                            firebase._loadedApp[e.sdkName] = 1;
                            Result.status = "success";
                            returnData();
                        }
                    }

                    if (e.action === "init") {
                        if (typeof firebase.mainSdkName === "undefined") firebase.mainSdkName = e.sdkName;

                        if (e.sdkName === firebase.mainSdkName) {
                            var iApp = ["deleteApp", "getApp", "initializeApp"];
                            var iAppCheck = ["initializeAppCheck", "ReCaptchaV3Provider", "ReCaptchaEnterpriseProvider", "getToken", "getLimitedUseToken"];
                            var iAuth = [
                                "createUserWithEmailAndPassword",
                                "deleteUser",
                                "getAdditionalUserInfo",
                                "getAuth",
                                "linkWithCredential",
                                "linkWithPhoneNumber",
                                "linkWithPopup",
                                "linkWithRedirect",
                                "onAuthStateChanged",
                                "sendEmailVerification",
                                "sendPasswordResetEmail",
                                "setPersistence",
                                "signInAnonymously",
                                "signInWithCredential",
                                "signInWithEmailAndPassword",
                                "signInWithPhoneNumber",
                                "signInWithPopup",
                                "signInWithRedirect",
                                "signInWithCustomToken",
                                "signOut",
                                "unlink",
                                "updateEmail",
                                "updatePassword",
                                "updatePhoneNumber",
                                "updateProfile",
                                "useDeviceLanguage",
                                "AuthCredential",
                                "EmailAuthCredential",
                                "EmailAuthProvider",
                                "FacebookAuthProvider",
                                "GithubAuthProvider",
                                "GoogleAuthProvider",
                                "OAuthProvider",
                                "OAuthCredential",
                                "PhoneAuthCredential",
                                "PhoneAuthProvider",
                                "RecaptchaVerifier",
                                "TwitterAuthProvider",
                            ];
                            var iRD = [
                                "enableLogging",
                                "endAt",
                                "endBefore",
                                "equalTo",
                                "get",
                                "getDatabase",
                                "goOffline",
                                "goOnline",
                                "increment",
                                "limitToFirst",
                                "limitToLast",
                                "off",
                                "onChildAdded",
                                "onChildChanged",
                                "onChildMoved",
                                "onChildRemoved",
                                "onDisconnect",
                                "onValue",
                                "orderByChild",
                                "orderByKey",
                                "orderByValue",
                                "push",
                                "query",
                                "ref",
                                "set",
                                "remove",
                                "runTransaction",
                                "serverTimestamp",
                                "startAfter",
                                "startAt",
                                "update",
                            ];
                            var iFirestore = [
                                "addDoc",
                                "arrayRemove",
                                "arrayUnion",
                                "clearIndexedDbPersistence",
                                "collection",
                                "collectionGroup",
                                "deleteDoc",
                                "deleteField",
                                "disableNetwork",
                                "doc",
                                "documentId",
                                "enableIndexedDbPersistence",
                                "enableMultiTabIndexedDbPersistence",
                                "enableNetwork",
                                "endAt",
                                "endBefore",
                                "getDoc",
                                "getDocFromCache",
                                "getDocFromServer",
                                "getDocs",
                                "getFirestore",
                                "increment",
                                "initializeFirestore",
                                "limit",
                                "limitToLast",
                                "loadBundle",
                                "namedQuery",
                                "onSnapshot",
                                "onSnapshotsInSync",
                                "orderBy",
                                "query",
                                "refEqual",
                                "runTransaction",
                                "serverTimestamp",
                                "setDoc",
                                "setLogLevel",
                                "snapshotEqual",
                                "startAfter",
                                "startAt",
                                "terminate",
                                "updateDoc",
                                "waitForPendingWrites",
                                "where",
                                "writeBatch",
                            ];
                            var iStorage = [
                                "deleteObject",
                                "getDownloadURL",
                                "getMetadata",
                                "getStorage",
                                "list",
                                "listAll",
                                "ref",
                                "updateMetadata",
                                "uploadBytes",
                                "uploadBytesResumable",
                                "uploadString",
                            ];
                            var iAnalytics = ["getAnalytics", "initializeAnalytics", "logEvent", "setAnalyticsCollectionEnabled", "setUserId", "setUserProperties"];
                            var iRemoteConfig = ["fetchAndActivate", "getAll", "getRemoteConfig"];
                            var iPerformance = ["getPerformance", "trace"];
                            e.remove_remoteconfig = "";
                            //e.remove_analytics = "";
                            e.remove_performance = "";

                            const srcFirebase = "https://www.gstatic.com/firebasejs/" + e.version + "/firebase-";
                            var importString = "";
                            var varString = "";

                            function setScriptString(arr, rem, serviceNm) {
                                importString += "import {";
                                varString += "globalThis.sparshaFirebase." + serviceNm + "={";
                                rem = JSON.parse("[\"" + rem.replaceAll("\n", "\",\"") + "\"]");
                                rem.forEach(function (item) {
                                    const index = arr.indexOf(item);
                                    if (index > -1) {
                                        arr.splice(index, 1);
                                    }
                                });

                                arr.forEach(function (item) {
                                    if (serviceNm === "database" && (item === "ref" || item === "endAt" || item === "endBefore" || item === "increment" || item === "limitToLast" || item === "query" || item === "runTransaction" || item === "serverTimestamp" || item === "startAfter" || item === "startAt")) {
                                        var newName = item + serviceNm;
                                        importString += item + " as " + newName + ", ";
                                        varString += item + ":" + newName + ",";
                                    }
                                    else {
                                        importString += item + ", ";
                                        varString += item + ":" + item + ",";
                                    }
                                });
                                if (serviceNm === "appcheck") serviceNm = "app-check";
                                if (serviceNm === "remoteconfig") serviceNm = "remote-config";
                                importString += "  } from \"" + srcFirebase + serviceNm + ".js\";";
                                varString += "};"
                            }

                            if (typeof window.cordova !== "undefined") e.enable_analytics = false;
                            

                            setScriptString(iApp, e.remove_app, "app");
                            if (e.enable_appcheck) setScriptString(iAppCheck, e.remove_appcheck, "appcheck");

                            if (e.enable_auth) setScriptString(iAuth, e.remove_auth, "auth");

                            if (e.enable_database) setScriptString(iRD, e.remove_database, "database");

                            if (e.enable_firestore) setScriptString(iFirestore, e.remove_firestore, "firestore");

                            if (e.enable_storage) setScriptString(iStorage, e.remove_storage, "storage");

                            if (e.enable_analytics) setScriptString(iAnalytics, e.remove_analytics, "analytics");

                            if (e.enable_remoteconfig) setScriptString(iRemoteConfig, e.remove_remoteconfig, "remoteconfig");
                            
                            if (e.enable_performance) setScriptString(iPerformance, e.remove_performance, "performance");

                            firebase._callInitApp = function () {
                                startInitApp(e.firebaseConfig)
                            }

                            firebase._isLoaded = 0;
                            function LoadScripts() {
                                var script = document.createElement("script");
                                script.type = "module";
                                script.innerHTML = importString + varString + "globalThis.sparshaFirebase._isLoaded=1;globalThis.sparshaFirebase._callInitApp();";
                                document.getElementsByTagName("head")[0].appendChild(script);
                            }
                            LoadScripts();
                            var myTimeout = setTimeout(function () {
                                if (firebase._isLoaded === 0) {
                                    if (e.debug) console.error("TIMEOUT" + "\nsdkObject: " + e.sdkName);
                                    if (e.autoLoad) LoadScripts();
                                    Result.status = "timeout";
                                    returnData();
                                }
                                else {
                                    clearTimeout(myTimeout);
                                }
                            }, e.tseconds * 1000);

                        }
                        else {
                            startInitApp(e.firebaseConfig)
                        }
                    }
                    else {
                        startInitApp(e.firebaseConfig)
                    }
                }
                else if (e.action === "disconnect") {
                    firebase.app.deleteApp(firebase.myApp[e.sdkName]);
                }
            }

            this.AddRuntimeMessageHandler("domSync_sparsha_fSDK", DoSync);
            //this.AddRuntimeMessageHandler("domAsync_sparsha_fSDK", DoAsync);
        }
    };
    self.RuntimeInterface.AddDOMHandlerClass(HANDLER_CLASS);
}

// scripts/plugins/Sparsha_FirebaseAuth/c3runtime/domside.js
"use strict";
{
    const DOM_COMPONENT_ID = "sparsha_firebase_auth";
    function StopPropagation(e) {
        e.stopPropagation();
    }
    const HANDLER_CLASS = class MyDOMHandler extends self.DOMHandler {
        constructor(iRuntime) {
            super(iRuntime, DOM_COMPONENT_ID);
            var self = this;

            async function DoAsync(e) {
                var RESULT = {
                    success: 0,
                };

                var firebase = globalThis.sparshaFirebase;
                var auth = firebase.myAuth[e.sdkName];

                if (e.action === "Signupemail" || e.action === "Signinemail" || e.action === "Signupname" || e.action === "Signinname") {
                    var signFunc = "", theEmail = "";
                    if (e.action === "Signupemail" || e.action === "Signupname") signFunc = "createUserWithEmailAndPassword";
                    else signFunc = "signInWithEmailAndPassword";
                    if (e.action === "Signupname" || e.action === "Signinname") theEmail = e.username.replace(/ /g, '') + "@" + e.domain;
                    else theEmail = e.email;

                    firebase._LoginByEvent[e.sdkName] = 1;

                    await firebase.auth[signFunc](auth, theEmail, e.password).then((userCredential) => {
                        var cred = new firebase.auth.EmailAuthCredential(theEmail, e.password, "password");
                        
                        const addInfo=firebase.auth.getAdditionalUserInfo(userCredential);
                        RESULT.isNewUser = addInfo.isNewUser;
                        RESULT.addInfoJSON=JSON.stringify(addInfo);

                        var authMapRes = firebase._GetAuthMapData(userCredential.user, e.sdkName);
                        RESULT.userBasic = authMapRes.authExpBasic;
                        RESULT.userPro = authMapRes.authExpPro;

                        RESULT.cred = JSON.stringify(cred);
                        RESULT.success = 1;
                    }).catch((error) => {
                        firebase._LoginByEvent[e.sdkName] = 0;

                        RESULT.success = 0;
                        RESULT.errorCode = error.code;
                        RESULT.errorMessage = error.message;
                    })
                    if (e.action === "Signupname" && RESULT.success) {
                        await firebase.auth.updateProfile(firebase._res[e.sdkName].user, { displayName: e.username }).then(() => {
                            RESULT.nameChange = 1;
                        }).catch((error) => {
                            RESULT.nameChange = 0;
                            RESULT.errorCode = error.code;
                            RESULT.errorMessage = error.message;
                        });
                    }
                }
                else if (e.action === "VerifyEmail") {
                    await firebase.auth.sendEmailVerification(firebase._res[e.sdkName].user).then(() => {
                        RESULT.success = 1;
                    }).catch((error) => {
                        RESULT.success = 0;
                        RESULT.errorCode = error.code;
                        RESULT.errorMessage = error.message;
                    })
                }
                else if (e.action === "UpdateEmail") {
                    await firebase.auth.updateEmail(firebase._res[e.sdkName].user, e.newEmail).then(() => {
                        RESULT.success = 1;
                    }).catch((error) => {
                        RESULT.success = 0;
                        RESULT.errorCode = error.code;
                        RESULT.errorMessage = error.message;
                    });
                }
                else if (e.action === "ResetPassword") {
                    await firebase.auth.sendPasswordResetEmail(auth, e.email).then(() => {
                        RESULT.success = 1;
                    }).catch((error) => {
                        RESULT.success = 0;
                        RESULT.errorCode = error.code;
                        RESULT.errorMessage = error.message;
                    });
                }
                else if (e.action === "UpdatePassword") {
                    await firebase.auth.updatePassword(firebase._res[e.sdkName].user, e.password).then(() => {
                        RESULT.success = 1;
                    }).catch((error) => {
                        RESULT.success = 0;
                        RESULT.errorCode = error.code;
                        RESULT.errorMessage = error.message;
                    });
                }
                else if (e.action === "RenderRecaptcha") {

                    var reCaptchaObj = document.getElementById("SparshaFirebaseCaptcha");
                    if (reCaptchaObj === null) {
                        reCaptchaObj = document.createElement("BUTTON");
                        reCaptchaObj.display = "none";
                        reCaptchaObj.id = "SparshaFirebaseCaptcha";
                        document.body.appendChild(reCaptchaObj);
                    }
                    firebase._CaptchaVerifier = new firebase.auth.RecaptchaVerifier('SparshaFirebaseCaptcha', {
                        'size': 'invisible',
                        'theme': e.theme
                    }, auth);
                    await firebase._CaptchaVerifier.render().then((widgetId) => {
                        firebase._RecaptchaWidgetId = widgetId; //only for reCAPTCHA API Calls
                        RESULT.success = 1;
                    }).catch((error) => {
                        RESULT.success = 0;
                        RESULT.errorCode = error.code;
                        RESULT.errorMessage = error.message;
                    });

                }
                else if (e.action === "SendPhoneNumber") {
                    await firebase.auth.signInWithPhoneNumber(auth, e.phoneNumber, firebase._CaptchaVerifier).then((confirmationResult) => {
                        firebase._ConfirmationResult = confirmationResult;
                        RESULT.success = 1;
                    }).catch((error) => {
                        RESULT.success = 0;
                        RESULT.errorCode = error.code;
                        RESULT.errorMessage = error.message;
                    });
                }
                else if (e.action === "SubmitOtp") {
                    firebase._LoginByEvent[e.sdkName] = 1;
                    await firebase._ConfirmationResult.confirm(e.otp).then((result) => {
                        const addInfo=firebase.auth.getAdditionalUserInfo(result);
                        RESULT.isNewUser = addInfo.isNewUser;
                        RESULT.addInfoJSON=JSON.stringify(addInfo);
                        RESULT.cred = firebase.auth.PhoneAuthProvider.credential(firebase._ConfirmationResult.verificationId, e.otp);
                        var authMapRes = firebase._GetAuthMapData(result.user, e.sdkName);
                        RESULT.userBasic = authMapRes.authExpBasic;
                        RESULT.userPro = authMapRes.authExpPro;
                        RESULT.cred = JSON.stringify(RESULT.cred);
                        RESULT.success = 1;
                    }).catch((error) => {
                        firebase._LoginByEvent[e.sdkName] = 0;
                        RESULT.success = 0;
                        RESULT.errorCode = error.code;
                        RESULT.errorMessage = error.message;
                    });
                }
                else if (e.action === "SignOut") {
                    await firebase.auth.signOut(auth).then(() => {
                        RESULT.success = 1;
                    }).catch((error) => {
                        RESULT.success = 0;
                        RESULT.errorCode = error.code;
                        RESULT.errorMessage = error.message;
                    });
                    if (typeof window.cordova !== "undefined") {
                        if (typeof window.cordova.plugins !== "undefined") {
                            if (typeof window.cordova.plugins.firebase !== "undefined") await window.cordova.plugins.firebase.auth.signOut();
                        }
                    }
                    if (typeof window.plugins !== "undefined") {
                        if (typeof window.plugins.googleplus !== "undefined") await window.plugins.googleplus.logout();
                    }
                    if (typeof window.facebookConnectPlugin !== "undefined") await window.facebookConnectPlugin.logout();
                }
                else if (e.action === "UpdateUsername") {
                    await firebase.auth.updateProfile(firebase._res[e.sdkName].user, e.updateProfOb).then(() => {
                        RESULT.success = 1;
                    }).catch((error) => {
                        RESULT.success = 0;
                        RESULT.errorCode = error.code;
                        RESULT.errorMessage = error.message;
                    });
                }
                else if (e.action === "DeleteUser") {
                    await firebase.auth.deleteUser(firebase._res[e.sdkName].user).then(() => {
                        RESULT.success = 1;
                    }).catch((error) => {
                        RESULT.success = 0;
                        RESULT.errorCode = error.code;
                        RESULT.errorMessage = error.message;
                    });
                }
                else if (e.action === "PopupOauth") {
                    firebase._LoginByEvent[e.sdkName] = 1;
                    var provider;
                    if (e.providerNo === 0) {
                        provider = new firebase.auth.GoogleAuthProvider();
                        if(e.googlePromptSelect){
                        	provider["setCustomParameters"]({
  								"prompt": "select_account",
							});
                        }
                    }
                    else if (e.providerNo === 1) provider = new firebase.auth.FacebookAuthProvider();
                    else if (e.providerNo === 2) provider = new firebase.auth.OAuthProvider('apple.com');
                    else if (e.providerNo === 3) provider = new firebase.auth.TwitterAuthProvider();
                    else if (e.providerNo === 4) provider = new firebase.auth.GithubAuthProvider();
                    else if (e.providerNo === 5) provider = new firebase.auth.OAuthProvider('microsoft.com');
                    else if (e.providerNo === 6) provider = new firebase.auth.OAuthProvider('yahoo.com');

                    var authResult;
                    await firebase.auth.signInWithPopup(auth, provider).then((result) => {
                        const addInfo=firebase.auth.getAdditionalUserInfo(result);
                        RESULT.isNewUser = addInfo.isNewUser;
                        RESULT.addInfoJSON=JSON.stringify(addInfo);
                        authResult = result;
                        var authMapRes = firebase._GetAuthMapData(result.user, e.sdkName);
                        RESULT.userBasic = authMapRes.authExpBasic;
                        RESULT.userPro = authMapRes.authExpPro;

                        if (e.providerNo === 0) RESULT.cred = firebase.auth.GoogleAuthProvider.credentialFromResult(result);
                        else if (e.providerNo === 2) RESULT.cred = firebase.auth.OAuthProvider.credentialFromResult(result);
                        else if (e.providerNo === 3) RESULT.cred = firebase.auth.TwitterAuthProvider.credentialFromResult(result);
                        else if (e.providerNo === 4) RESULT.cred = firebase.auth.GithubAuthProvider.credentialFromResult(result);
                        else if (e.providerNo >= 5) RESULT.cred = firebase.auth.OAuthProvider.credentialFromResult(result);
                        RESULT.cred = JSON.stringify(RESULT.cred);
                        RESULT.success = 1;
                    }).catch((error) => {
                        firebase._LoginByEvent[e.sdkName] = 0;
                        RESULT.success = 0;
                        RESULT.errorCode = error.code;
                        RESULT.errorMessage = error.message;
                        //const email = error.email;
                        //const credential = FacebookAuthProvider.credentialFromError(error);
                    });
                    if (e.providerNo === 1 && RESULT.success === 1) {
                        RESULT.cred = firebase.auth.FacebookAuthProvider.credentialFromResult(authResult);

                        var user = authResult.user;
                        var newPic = user.photoURL.split('?')[0] + "?access_token=" + RESULT.cred.accessToken;
                        RESULT.cred = JSON.stringify(RESULT.cred);

                        await firebase.auth.updateProfile(firebase._res[e.sdkName].user, { photoURL: newPic }).then(() => {
                            RESULT.picChange = 1;
                            RESULT.newPicUrl = newPic;
                        }).catch((error) => {
                            RESULT.picChange = 0;
                            RESULT.errorCode = error.code;
                            RESULT.errorMessage = error.message;
                        });
                    }

                }

                return RESULT;
            }

            function DoSync(e) {
                if (e.action === "RemoveRecaptcha") {
                    var style = document.createElement('style');
                    style.innerHTML = ".grecaptcha-badge{visibility: hidden;}"
                    document.head.appendChild(style);
                }
                else if (e.action === "PopupOauthSafe") {
                    var RESULT = e;
                    RESULT.success=0;
                    var firebase = globalThis.sparshaFirebase;
                    var auth = firebase.myAuth[e.sdkName];

                    window.document.getElementById(e.buttonId).onclick = function() {PopupOauthSafe_Func()};

                    function PopupOauthSafe_Func() {
                        var provider;
                        if (e.providerNo === 0) {
                        	provider = new firebase.auth.GoogleAuthProvider();
                        	if(e.googlePromptSelect){
                        		provider["setCustomParameters"]({
  									"prompt": "select_account",
								});
                        	}
                        }
                        else if (e.providerNo === 1) provider = new firebase.auth.FacebookAuthProvider();
                        else if (e.providerNo === 2) provider = new firebase.auth.OAuthProvider('apple.com');
                        else if (e.providerNo === 3) provider = new firebase.auth.TwitterAuthProvider();
                        else if (e.providerNo === 4) provider = new firebase.auth.GithubAuthProvider();
                        else if (e.providerNo === 5) provider = new firebase.auth.OAuthProvider('microsoft.com');
                        else if (e.providerNo === 6) provider = new firebase.auth.OAuthProvider('yahoo.com');

                        var authResult;
                        firebase.auth.signInWithPopup(auth, provider).then((result) => {
                        	const addInfo=firebase.auth.getAdditionalUserInfo(result);
                            RESULT.isNewUser = addInfo.isNewUser;
                            RESULT.addInfoJSON=JSON.stringify(addInfo);
                            authResult = result;
                            var authMapRes = firebase._GetAuthMapData(result.user, e.sdkName);
                            RESULT.userBasic = authMapRes.authExpBasic;
                            RESULT.userPro = authMapRes.authExpPro;
                            RESULT.success = 1;
                            if (e.providerNo === 0) RESULT.cred = firebase.auth.GoogleAuthProvider.credentialFromResult(result);
                            else if (e.providerNo === 1) {
                                RESULT.cred = firebase.auth.FacebookAuthProvider.credentialFromResult(authResult);

                                var user = authResult.user;
                                var newPic = user.photoURL.split('?')[0] + "?access_token=" + RESULT.cred.accessToken;
                                RESULT.cred = JSON.stringify(RESULT.cred);

                                firebase.auth.updateProfile(firebase._res[e.sdkName].user, { photoURL: newPic }).then(() => {
                                    RESULT.picChange = 1;
                                    RESULT.newPicUrl = newPic;
                                    self.PostToRuntime("run_sparsha_fAuthBasic" + e.plugin_uid, RESULT);
                                }).catch((error) => {
                                    RESULT.picChange = 0;
                                    RESULT.errorCode = error.code;
                                    RESULT.errorMessage = error.message;
                                    self.PostToRuntime("run_sparsha_fAuthBasic" + e.plugin_uid, RESULT);
                                });
                            }
                            else if (e.providerNo === 2) RESULT.cred = firebase.auth.OAuthProvider.credentialFromResult(result);
                            else if (e.providerNo === 3) RESULT.cred = firebase.auth.TwitterAuthProvider.credentialFromResult(result);
                            else if (e.providerNo === 4) RESULT.cred = firebase.auth.GithubAuthProvider.credentialFromResult(result);
                            else if (e.providerNo >= 5) RESULT.cred = firebase.auth.OAuthProvider.credentialFromResult(result);
                            RESULT.cred = JSON.stringify(RESULT.cred);
                            self.PostToRuntime("run_sparsha_fAuthBasic" + e.plugin_uid, RESULT);
                        }).catch((error) => {
                            RESULT.success = 0;
                            RESULT.errorCode = error.code;
                            RESULT.errorMessage = error.message;
                            self.PostToRuntime("run_sparsha_fAuthBasic" + e.plugin_uid, RESULT);
                            //const email = error.email;
                            //const credential = FacebookAuthProvider.credentialFromError(error);
                        });
                    }

                }
            }

            this.AddRuntimeMessageHandler("domSync_sparsha_fAuth", DoSync);
            this.AddRuntimeMessageHandler("domAsync_sparsha_fAuth", DoAsync);
        }
    };
    self.RuntimeInterface.AddDOMHandlerClass(HANDLER_CLASS);
}

// scripts/plugins/Button/dom/domSide.js
'use strict';{const DOM_COMPONENT_ID="button";function StopPropagation(e){e.stopPropagation()}const HANDLER_CLASS=class ButtonDOMHandler extends self.DOMElementHandler{constructor(iRuntime){super(iRuntime,DOM_COMPONENT_ID)}CreateElement(elementId,e){const inputElem=document.createElement("input");const isCheckbox=e["isCheckbox"];let mainElem=inputElem;if(isCheckbox){inputElem.type="checkbox";const labelElem=document.createElement("label");labelElem.appendChild(inputElem);labelElem.appendChild(document.createTextNode(""));
labelElem.style.fontFamily="sans-serif";labelElem.style.userSelect="none";labelElem.style.webkitUserSelect="none";labelElem.style.display="inline-block";labelElem.style.color="black";mainElem=labelElem}else inputElem.type="button";mainElem.style.position="absolute";mainElem.addEventListener("pointerdown",StopPropagation);mainElem.addEventListener("pointermove",StopPropagation);mainElem.addEventListener("pointerrawupdate",StopPropagation);mainElem.addEventListener("pointerup",StopPropagation);mainElem.addEventListener("mousedown",
StopPropagation);mainElem.addEventListener("mouseup",StopPropagation);mainElem.addEventListener("keydown",StopPropagation);mainElem.addEventListener("keyup",StopPropagation);mainElem.addEventListener("contextmenu",e=>e.preventDefault());inputElem.addEventListener("click",()=>this._PostToRuntimeElementMaybeSync("click",elementId,{"isChecked":inputElem.checked}));if(e["id"])inputElem.id=e["id"];if(e["className"])inputElem.className=e["className"];this.UpdateState(mainElem,e);return mainElem}_GetInputElem(mainElem){if(mainElem.tagName.toLowerCase()===
"input")return mainElem;else return mainElem.firstChild}_GetFocusElement(mainElem){return this._GetInputElem(mainElem)}UpdateState(mainElem,e){const inputElem=this._GetInputElem(mainElem);inputElem.checked=e["isChecked"];inputElem.disabled=!e["isEnabled"];mainElem.title=e["title"];if(mainElem===inputElem)inputElem.value=e["text"];else mainElem.lastChild.textContent=e["text"]}};self.RuntimeInterface.AddDOMHandlerClass(HANDLER_CLASS)};


// scripts/plugins/Browser/dom/domSide.js
'use strict';{let deferredInstallPromptEvent=null;let browserDomHandler=null;window.addEventListener("beforeinstallprompt",e=>{e.preventDefault();deferredInstallPromptEvent=e;if(browserDomHandler)browserDomHandler._OnBeforeInstallPrompt();return false});function elemsForSelector(selector,isAll){if(!selector)return[document.documentElement];else if(isAll)return Array.from(document.querySelectorAll(selector));else{const e=document.querySelector(selector);return e?[e]:[]}}function noop(){}const DOM_COMPONENT_ID=
"browser";const HANDLER_CLASS=class BrowserDOMHandler extends self.DOMHandler{constructor(iRuntime){super(iRuntime,DOM_COMPONENT_ID);this._exportType="";this.AddRuntimeMessageHandlers([["get-initial-state",e=>this._OnGetInitialState(e)],["ready-for-sw-messages",()=>this._OnReadyForSWMessages()],["alert",e=>this._OnAlert(e)],["close",()=>this._OnClose()],["set-focus",e=>this._OnSetFocus(e)],["vibrate",e=>this._OnVibrate(e)],["lock-orientation",e=>this._OnLockOrientation(e)],["unlock-orientation",()=>
this._OnUnlockOrientation()],["navigate",e=>this._OnNavigate(e)],["request-fullscreen",e=>this._OnRequestFullscreen(e)],["exit-fullscreen",()=>this._OnExitFullscreen()],["set-hash",e=>this._OnSetHash(e)],["set-document-css-style",e=>this._OnSetDocumentCSSStyle(e)],["get-document-css-style",e=>this._OnGetDocumentCSSStyle(e)],["set-window-size",e=>this._OnSetWindowSize(e)],["set-window-position",e=>this._OnSetWindowPosition(e)],["request-install",()=>this._OnRequestInstall()],["set-warn-on-close",e=>
this._OnSetWarnOnClose(e)]]);window.addEventListener("online",()=>this._OnOnlineStateChanged(true));window.addEventListener("offline",()=>this._OnOnlineStateChanged(false));window.addEventListener("hashchange",()=>this._OnHashChange());this._beforeunload_handler=e=>e.preventDefault();document.addEventListener("backbutton",()=>this._OnCordovaBackButton())}Attach(){if(deferredInstallPromptEvent)this._OnBeforeInstallPrompt();else browserDomHandler=this;window.addEventListener("appinstalled",()=>this._OnAppInstalled())}_OnGetInitialState(e){this._exportType=
e["exportType"];return{"location":location.toString(),"isOnline":!!navigator.onLine,"referrer":document.referrer,"title":document.title,"isCookieEnabled":!!navigator.cookieEnabled,"screenWidth":screen.width,"screenHeight":screen.height,"windowOuterWidth":window.outerWidth,"windowOuterHeight":window.outerHeight,"isConstructArcade":typeof window["is_scirra_arcade"]!=="undefined"}}_OnReadyForSWMessages(){if(!window["C3_RegisterSW"]||!window["OfflineClientInfo"])return;window["OfflineClientInfo"]["SetMessageCallback"](e=>
this.PostToRuntime("sw-message",e["data"]))}_OnBeforeInstallPrompt(){this.PostToRuntime("install-available")}async _OnRequestInstall(){if(!deferredInstallPromptEvent)return{"result":"unavailable"};try{deferredInstallPromptEvent["prompt"]();const result=await deferredInstallPromptEvent["userChoice"];return{"result":result["outcome"]}}catch(err){console.error("[Construct] Requesting install failed: ",err);return{"result":"failed"}}}_OnAppInstalled(){this.PostToRuntime("app-installed")}_OnOnlineStateChanged(isOnline){this.PostToRuntime("online-state",
{"isOnline":isOnline})}_OnCordovaBackButton(){this.PostToRuntime("backbutton")}GetNWjsWindow(){if(this._exportType==="nwjs")return nw["Window"]["get"]();else return null}_OnAlert(e){alert(e["message"])}_OnClose(){if(navigator["app"]&&navigator["app"]["exitApp"])navigator["app"]["exitApp"]();else if(navigator["device"]&&navigator["device"]["exitApp"])navigator["device"]["exitApp"]();else window.close()}_OnSetFocus(e){const isFocus=e["isFocus"];if(this._exportType==="nwjs"){const win=this.GetNWjsWindow();
if(isFocus)win["focus"]();else win["blur"]()}else if(isFocus)window.focus();else window.blur()}_OnVibrate(e){if(navigator["vibrate"])navigator["vibrate"](e["pattern"])}_OnLockOrientation(e){const orientation=e["orientation"];if(screen["orientation"]&&screen["orientation"]["lock"])screen["orientation"]["lock"](orientation).catch(err=>console.warn("[Construct] Failed to lock orientation: ",err));else try{let result=false;if(screen["lockOrientation"])result=screen["lockOrientation"](orientation);else if(screen["webkitLockOrientation"])result=
screen["webkitLockOrientation"](orientation);else if(screen["mozLockOrientation"])result=screen["mozLockOrientation"](orientation);else if(screen["msLockOrientation"])result=screen["msLockOrientation"](orientation);if(!result)console.warn("[Construct] Failed to lock orientation")}catch(err){console.warn("[Construct] Failed to lock orientation: ",err)}}_OnUnlockOrientation(){try{if(screen["orientation"]&&screen["orientation"]["unlock"])screen["orientation"]["unlock"]();else if(screen["unlockOrientation"])screen["unlockOrientation"]();
else if(screen["webkitUnlockOrientation"])screen["webkitUnlockOrientation"]();else if(screen["mozUnlockOrientation"])screen["mozUnlockOrientation"]();else if(screen["msUnlockOrientation"])screen["msUnlockOrientation"]()}catch(err){}}_OnNavigate(e){const type=e["type"];if(type==="back")if(navigator["app"]&&navigator["app"]["backHistory"])navigator["app"]["backHistory"]();else window.history.back();else if(type==="forward")window.history.forward();else if(type==="reload")location.reload();else if(type===
"url"){const url=e["url"];const target=e["target"];const exportType=e["exportType"];if(self["cordova"]&&self["cordova"]["InAppBrowser"])self["cordova"]["InAppBrowser"]["open"](url,"_system");else if(exportType==="preview"||this._iRuntime.IsAnyWebView2Wrapper())window.open(url,"_blank");else if(!this._isConstructArcade)if(target===2)window.top.location=url;else if(target===1)window.parent.location=url;else window.location=url}else if(type==="new-window"){const url=e["url"];const tag=e["tag"];if(self["cordova"]&&
self["cordova"]["InAppBrowser"])self["cordova"]["InAppBrowser"]["open"](url,"_system");else window.open(url,tag)}}_OnRequestFullscreen(e){if(this._iRuntime.IsAnyWebView2Wrapper()||this._exportType==="macos-wkwebview"){self.RuntimeInterface._SetWrapperIsFullscreenFlag(true);this._iRuntime._SendWrapperMessage({"type":"set-fullscreen","fullscreen":true})}else{const opts={"navigationUI":"auto"};const navUI=e["navUI"];if(navUI===1)opts["navigationUI"]="hide";else if(navUI===2)opts["navigationUI"]="show";
const elem=document.documentElement;let ret;if(elem["requestFullscreen"])ret=elem["requestFullscreen"](opts);else if(elem["mozRequestFullScreen"])ret=elem["mozRequestFullScreen"](opts);else if(elem["msRequestFullscreen"])ret=elem["msRequestFullscreen"](opts);else if(elem["webkitRequestFullScreen"])if(typeof Element["ALLOW_KEYBOARD_INPUT"]!=="undefined")ret=elem["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);else ret=elem["webkitRequestFullScreen"]();if(ret instanceof Promise)ret.catch(noop)}}_OnExitFullscreen(){if(this._iRuntime.IsAnyWebView2Wrapper()||
this._exportType==="macos-wkwebview"){self.RuntimeInterface._SetWrapperIsFullscreenFlag(false);this._iRuntime._SendWrapperMessage({"type":"set-fullscreen","fullscreen":false})}else{let ret;if(document["exitFullscreen"])ret=document["exitFullscreen"]();else if(document["mozCancelFullScreen"])ret=document["mozCancelFullScreen"]();else if(document["msExitFullscreen"])ret=document["msExitFullscreen"]();else if(document["webkitCancelFullScreen"])ret=document["webkitCancelFullScreen"]();if(ret instanceof
Promise)ret.catch(noop)}}_OnSetHash(e){location.hash=e["hash"]}_OnHashChange(){this.PostToRuntime("hashchange",{"location":location.toString()})}_OnSetDocumentCSSStyle(e){const prop=e["prop"];const value=e["value"];const selector=e["selector"];const isAll=e["is-all"];try{const arr=elemsForSelector(selector,isAll);for(const e of arr)if(prop.startsWith("--"))e.style.setProperty(prop,value);else e.style[prop]=value}catch(err){console.warn("[Browser] Failed to set style: ",err)}}_OnGetDocumentCSSStyle(e){const prop=
e["prop"];const selector=e["selector"];try{const elem=document.querySelector(selector);if(elem){const computedStyle=window.getComputedStyle(elem);return{"isOk":true,"result":computedStyle.getPropertyValue(prop)}}else return{"isOk":false}}catch(err){console.warn("[Browser] Failed to get style: ",err);return{"isOk":false}}}_OnSetWindowSize(e){window.resizeTo(e["windowWidth"],e["windowHeight"])}_OnSetWindowPosition(e){window.moveTo(e["windowX"],e["windowY"])}_OnSetWarnOnClose(e){const enabled=e["enabled"];
if(enabled)window.addEventListener("beforeunload",this._beforeunload_handler);else window.removeEventListener("beforeunload",this._beforeunload_handler)}};self.RuntimeInterface.AddDOMHandlerClass(HANDLER_CLASS)};


// scripts/plugins/MixonGames_EasyGestures/lib/lib.js
!function(s,X,c){"use strict";var Y=["","webkit","Moz","MS","ms","o"],F=X.createElement("div"),W="function",r=Math.round,l=Math.abs,q=Date.now;function k(t,e,i){return setTimeout(V(t,i),e)}function i(t,e,i){return Array.isArray(t)&&(o(t,i[e],i),1)}function o(t,e,i){if(t)if(t.forEach)t.forEach(e,i);else if(t.length!==c)for(n=0;n<t.length;)e.call(i,t[n],n,t),n++;else for(var n in t)t.hasOwnProperty(n)&&e.call(i,t[n],n,t)}function H(i,t,e){var n="DEPRECATED METHOD: "+t+"\n"+e+" AT \n";return function(){var t=new Error("get-stack-trace"),t=t&&t.stack?t.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",e=s.console&&(s.console.warn||s.console.log);return e&&e.call(s.console,n,t),i.apply(this,arguments)}}var a="function"!=typeof Object.assign?function(t){if(t===c||null===t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),i=1;i<arguments.length;i++){var n=arguments[i];if(n!==c&&null!==n)for(var s in n)n.hasOwnProperty(s)&&(e[s]=n[s])}return e}:Object.assign,L=H(function(t,e,i){for(var n=Object.keys(e),s=0;s<n.length;)i&&t[n[s]]!==c||(t[n[s]]=e[n[s]]),s++;return t},"extend","Use `assign`."),U=H(function(t,e){return L(t,e,!0)},"merge","Use `assign`.");function t(t,e,i){var e=e.prototype,n=t.prototype=Object.create(e);n.constructor=t,n._super=e,i&&a(n,i)}function V(t,e){return function(){return t.apply(e,arguments)}}function j(t,e){return typeof t==W?t.apply(e&&e[0]||c,e):t}function G(t,e){return t===c?e:t}function e(e,t,i){o(u(t),function(t){e.addEventListener(t,i,!1)})}function n(e,t,i){o(u(t),function(t){e.removeEventListener(t,i,!1)})}function Z(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function h(t,e){return-1<t.indexOf(e)}function u(t){return t.trim().split(/\s+/g)}function p(t,e,i){if(t.indexOf&&!i)return t.indexOf(e);for(var n=0;n<t.length;){if(i&&t[n][i]==e||!i&&t[n]===e)return n;n++}return-1}function f(t){return Array.prototype.slice.call(t,0)}function B(t,i,e){for(var n=[],s=[],r=0;r<t.length;){var o=i?t[r][i]:t[r];p(s,o)<0&&n.push(t[r]),s[r]=o,r++}return n=e?i?n.sort(function(t,e){return t[i]>e[i]}):n.sort():n}function d(t,e){for(var i,n=e[0].toUpperCase()+e.slice(1),s=0;s<Y.length;){if((i=(i=Y[s])?i+n:e)in t)return i;s++}return c}var $=1;function J(t){t=t.ownerDocument||t;return t.defaultView||t.parentWindow||s}var K="ontouchstart"in s,Q=d(s,"PointerEvent")!==c,tt=K&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),v="touch",et="mouse",it=25,m=1,g=4,T=8,y=1,E=2,I=4,A=8,_=16,C=E|I,S=A|_,nt=C|S,st=["x","y"],b=["clientX","clientY"];function P(e,t){var i=this;this.manager=e,this.callback=t,this.element=e.element,this.target=e.options.inputTarget,this.domHandler=function(t){j(e.options.enable,[e])&&i.handler(t)},this.init()}function rt(t,e,i){var n=i.pointers.length,s=i.changedPointers.length,r=e&m&&n-s==0,n=e&(g|T)&&n-s==0,s=(i.isFirst=!!r,i.isFinal=!!n,r&&(t.session={}),i.eventType=e,t),n=i,r=s.session,e=n.pointers,o=e.length,o=(r.firstInput||(r.firstInput=ot(n)),1<o&&!r.firstMultiple?r.firstMultiple=ot(n):1===o&&(r.firstMultiple=!1),r.firstInput),a=r.firstMultiple,h=(a||o).center,u=n.center=at(e),o=(n.timeStamp=q(),n.deltaTime=n.timeStamp-o.timeStamp,n.angle=ct(h,u),n.distance=D(h,u),function(t,e){var i=e.center,n=t.offsetDelta||{},s=t.prevDelta||{},r=t.prevInput||{};e.eventType!==m&&r.eventType!==g||(s=t.prevDelta={x:r.deltaX||0,y:r.deltaY||0},n=t.offsetDelta={x:i.x,y:i.y});e.deltaX=s.x+(i.x-n.x),e.deltaY=s.y+(i.y-n.y)}(r,n),n.offsetDirection=ut(n.deltaX,n.deltaY),ht(n.deltaTime,n.deltaX,n.deltaY)),h=(n.overallVelocityX=o.x,n.overallVelocityY=o.y,n.overallVelocity=l(o.x)>l(o.y)?o.x:o.y,n.scale=a?function(t,e){return D(e[0],e[1],b)/D(t[0],t[1],b)}(a.pointers,e):1,n.rotation=a?function(t,e){return ct(e[1],e[0],b)+ct(t[1],t[0],b)}(a.pointers,e):0,n.maxPointers=!r.prevInput||n.pointers.length>r.prevInput.maxPointers?n.pointers.length:r.prevInput.maxPointers,function(t,e){var i,n,s,r=t.lastInterval||e,o=e.timeStamp-r.timeStamp;{var a,h;e.eventType!=T&&(it<o||r.velocity===c)?(a=e.deltaX-r.deltaX,h=e.deltaY-r.deltaY,o=ht(o,a,h),n=o.x,s=o.y,i=l(o.x)>l(o.y)?o.x:o.y,a=ut(a,h),t.lastInterval=e):(i=r.velocity,n=r.velocityX,s=r.velocityY,a=r.direction)}e.velocity=i,e.velocityX=n,e.velocityY=s,e.direction=a}(r,n),s.element);Z(n.srcEvent.target,h)&&(h=n.srcEvent.target),n.target=h,t.emit("hammer.input",i),t.recognize(i),t.session.prevInput=i}function ot(t){for(var e=[],i=0;i<t.pointers.length;)e[i]={clientX:r(t.pointers[i].clientX),clientY:r(t.pointers[i].clientY)},i++;return{timeStamp:q(),pointers:e,center:at(e),deltaX:t.deltaX,deltaY:t.deltaY}}function at(t){var e=t.length;if(1===e)return{x:r(t[0].clientX),y:r(t[0].clientY)};for(var i=0,n=0,s=0;s<e;)i+=t[s].clientX,n+=t[s].clientY,s++;return{x:r(i/e),y:r(n/e)}}function ht(t,e,i){return{x:e/t||0,y:i/t||0}}function ut(t,e){return t===e?y:l(t)>=l(e)?t<0?E:I:e<0?A:_}function D(t,e,i){var n=e[(i=i||st)[0]]-t[i[0]],e=e[i[1]]-t[i[1]];return Math.sqrt(n*n+e*e)}function ct(t,e,i){var n=e[(i=i||st)[0]]-t[i[0]],e=e[i[1]]-t[i[1]];return 180*Math.atan2(e,n)/Math.PI}P.prototype={handler:function(){},init:function(){this.evEl&&e(this.element,this.evEl,this.domHandler),this.evTarget&&e(this.target,this.evTarget,this.domHandler),this.evWin&&e(J(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&n(this.element,this.evEl,this.domHandler),this.evTarget&&n(this.target,this.evTarget,this.domHandler),this.evWin&&n(J(this.element),this.evWin,this.domHandler)}};var lt={mousedown:m,mousemove:2,mouseup:g};function x(){this.evEl="mousedown",this.evWin="mousemove mouseup",this.pressed=!1,P.apply(this,arguments)}t(x,P,{handler:function(t){var e=lt[t.type];e&m&&0===t.button&&(this.pressed=!0),2&e&&1!==t.which&&(e=g),this.pressed&&(e&g&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:et,srcEvent:t}))}});var pt={pointerdown:m,pointermove:2,pointerup:g,pointercancel:T,pointerout:T},ft={2:v,3:"pen",4:et,5:"kinect"},dt="pointerdown",vt="pointermove pointerup pointercancel";function mt(){this.evEl=dt,this.evWin=vt,P.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}s.MSPointerEvent&&!s.PointerEvent&&(dt="MSPointerDown",vt="MSPointerMove MSPointerUp MSPointerCancel"),t(mt,P,{handler:function(t){var e=this.store,i=!1,n=t.type.toLowerCase().replace("ms",""),n=pt[n],s=ft[t.pointerType]||t.pointerType,r=s==v,o=p(e,t.pointerId,"pointerId");n&m&&(0===t.button||r)?o<0&&(e.push(t),o=e.length-1):n&(g|T)&&(i=!0),o<0||(e[o]=t,this.callback(this.manager,n,{pointers:e,changedPointers:[t],pointerType:s,srcEvent:t}),i&&e.splice(o,1))}});var gt={touchstart:m,touchmove:2,touchend:g,touchcancel:T};function Tt(){this.evTarget="touchstart",this.evWin="touchstart touchmove touchend touchcancel",this.started=!1,P.apply(this,arguments)}t(Tt,P,{handler:function(t){var e,i=gt[t.type];i===m&&(this.started=!0),this.started&&(e=function(t,e){var i=f(t.touches),t=f(t.changedTouches);e&(g|T)&&(i=B(i.concat(t),"identifier",!0));return[i,t]}.call(this,t,i),i&(g|T)&&e[0].length-e[1].length==0&&(this.started=!1),this.callback(this.manager,i,{pointers:e[0],changedPointers:e[1],pointerType:v,srcEvent:t}))}});var yt={touchstart:m,touchmove:2,touchend:g,touchcancel:T};function Et(){this.evTarget="touchstart touchmove touchend touchcancel",this.targetIds={},P.apply(this,arguments)}t(Et,P,{handler:function(t){var e=yt[t.type],i=function(t,e){var i=f(t.touches),n=this.targetIds;if(e&(2|m)&&1===i.length)return n[i[0].identifier]=!0,[i,i];var s,r,o=f(t.changedTouches),a=[],h=this.target;if(r=i.filter(function(t){return Z(t.target,h)}),e===m)for(s=0;s<r.length;)n[r[s].identifier]=!0,s++;s=0;for(;s<o.length;)n[o[s].identifier]&&a.push(o[s]),e&(g|T)&&delete n[o[s].identifier],s++;if(a.length)return[B(r.concat(a),"identifier",!0),a]}.call(this,t,e);i&&this.callback(this.manager,e,{pointers:i[0],changedPointers:i[1],pointerType:v,srcEvent:t})}});var It=2500;function At(){P.apply(this,arguments);var t=V(this.handler,this);this.touch=new Et(this.manager,t),this.mouse=new x(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function _t(t){var e,i,t=t.changedPointers[0];t.identifier===this.primaryTouch&&(e={x:t.clientX,y:t.clientY},this.lastTouches.push(e),i=this.lastTouches,setTimeout(function(){var t=i.indexOf(e);-1<t&&i.splice(t,1)},It))}t(At,P,{handler:function(t,e,i){var n=i.pointerType==v,s=i.pointerType==et;if(!(s&&i.sourceCapabilities&&i.sourceCapabilities.firesTouchEvents)){if(n)!function(t,e){t&m?(this.primaryTouch=e.changedPointers[0].identifier,_t.call(this,e)):t&(g|T)&&_t.call(this,e)}.call(this,e,i);else if(s&&function(t){for(var e=t.srcEvent.clientX,i=t.srcEvent.clientY,n=0;n<this.lastTouches.length;n++){var s=this.lastTouches[n],r=Math.abs(e-s.x),s=Math.abs(i-s.y);if(r<=25&&s<=25)return!0}return!1}.call(this,i))return;this.callback(t,e,i)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Ct=d(F.style,"touchAction"),St=Ct!==c,bt="compute",Pt="manipulation",w="none",O="pan-x",R="pan-y",Dt=function(){if(!St)return!1;var e={},i=s.CSS&&s.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(t){e[t]=!i||s.CSS.supports("touch-action",t)}),e}();function xt(t,e){this.manager=t,this.set(e)}xt.prototype={set:function(t){t==bt&&(t=this.compute()),St&&this.manager.element.style&&Dt[t]&&(this.manager.element.style[Ct]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var e=[],t=(o(this.manager.recognizers,function(t){j(t.options.enable,[t])&&(e=e.concat(t.getTouchAction()))}),e.join(" "));if(h(t,w))return w;var i=h(t,O),n=h(t,R);return i&&n?w:i||n?i?O:R:h(t,Pt)?Pt:"auto"},preventDefaults:function(t){var e=t.srcEvent,i=t.offsetDirection;if(this.manager.session.prevented)e.preventDefault();else{var n=this.actions,s=h(n,w)&&!Dt[w],r=h(n,R)&&!Dt[R],n=h(n,O)&&!Dt[O];if(s){var o=1===t.pointers.length,a=t.distance<2,t=t.deltaTime<250;if(o&&a&&t)return}if(!n||!r)return s||r&&i&C||n&&i&S?this.preventSrc(e):void 0}},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};function M(t){this.options=a({},this.defaults,t||{}),this.id=$++,this.manager=null,this.options.enable=G(this.options.enable,!0),this.state=1,this.simultaneous={},this.requireFail=[]}function wt(t){return 16&t?"cancel":8&t?"end":4&t?"move":2&t?"start":""}function Ot(t){return t==_?"down":t==A?"up":t==E?"left":t==I?"right":""}function Rt(t,e){e=e.manager;return e?e.get(t):t}function z(){M.apply(this,arguments)}function Mt(){z.apply(this,arguments),this.pX=null,this.pY=null}function zt(){z.apply(this,arguments)}function Nt(){M.apply(this,arguments),this._timer=null,this._input=null}function Xt(){z.apply(this,arguments)}function Yt(){z.apply(this,arguments)}function Ft(){M.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function N(t,e){return(e=e||{}).recognizers=G(e.recognizers,N.defaults.preset),new Wt(t,e)}M.prototype={defaults:{},set:function(t){return a(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(i(t,"recognizeWith",this))return this;var e=this.simultaneous;return e[(t=Rt(t,this)).id]||(e[t.id]=t).recognizeWith(this),this},dropRecognizeWith:function(t){return i(t,"dropRecognizeWith",this)||(t=Rt(t,this),delete this.simultaneous[t.id]),this},requireFailure:function(t){if(i(t,"requireFailure",this))return this;var e=this.requireFail;return-1===p(e,t=Rt(t,this))&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(i(t,"dropRequireFailure",this))return this;t=Rt(t,this);t=p(this.requireFail,t);return-1<t&&this.requireFail.splice(t,1),this},hasRequireFailures:function(){return 0<this.requireFail.length},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(e){var i=this,t=this.state;function n(t){i.manager.emit(t,e)}t<8&&n(i.options.event+wt(t)),n(i.options.event),e.additionalEvent&&n(e.additionalEvent),8<=t&&n(i.options.event+wt(t))},tryEmit:function(t){if(this.canEmit())return this.emit(t);this.state=32},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(33&this.requireFail[t].state))return!1;t++}return!0},recognize:function(t){t=a({},t);if(!j(this.options.enable,[this,t]))return this.reset(),void(this.state=32);56&this.state&&(this.state=1),this.state=this.process(t),30&this.state&&this.tryEmit(t)},process:function(t){},getTouchAction:function(){},reset:function(){}},t(z,M,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,i=t.eventType,n=6&e,t=this.attrTest(t);return n&&(i&T||!t)?16|e:n||t?i&g?8|e:2&e?4|e:2:32}}),t(Mt,z,{defaults:{event:"pan",threshold:10,pointers:1,direction:nt},getTouchAction:function(){var t=this.options.direction,e=[];return t&C&&e.push(R),t&S&&e.push(O),e},directionTest:function(t){var e=this.options,i=!0,n=t.distance,s=t.direction,r=t.deltaX,o=t.deltaY;return s&e.direction||(n=e.direction&C?(s=0===r?y:r<0?E:I,i=r!=this.pX,Math.abs(t.deltaX)):(s=0===o?y:o<0?A:_,i=o!=this.pY,Math.abs(t.deltaY))),t.direction=s,i&&n>e.threshold&&s&e.direction},attrTest:function(t){return z.prototype.attrTest.call(this,t)&&(2&this.state||!(2&this.state)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=Ot(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),t(zt,z,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[w]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||2&this.state)},emit:function(t){var e;1!==t.scale&&(e=t.scale<1?"in":"out",t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),t(Nt,M,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return["auto"]},process:function(t){var e=this.options,i=t.pointers.length===e.pointers,n=t.distance<e.threshold,s=t.deltaTime>e.time;if(this._input=t,!n||!i||t.eventType&(g|T)&&!s)this.reset();else if(t.eventType&m)this.reset(),this._timer=k(function(){this.state=8,this.tryEmit()},e.time,this);else if(t.eventType&g)return 8;return 32},reset:function(){clearTimeout(this._timer)},emit:function(t){8===this.state&&(t&&t.eventType&g?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=q(),this.manager.emit(this.options.event,this._input)))}}),t(Xt,z,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[w]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||2&this.state)}}),t(Yt,z,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:C|S,pointers:1},getTouchAction:function(){return Mt.prototype.getTouchAction.call(this)},attrTest:function(t){var e,i=this.options.direction;return i&(C|S)?e=t.overallVelocity:i&C?e=t.overallVelocityX:i&S&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&i&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&l(e)>this.options.velocity&&t.eventType&g},emit:function(t){var e=Ot(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),t(Ft,M,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[Pt]},process:function(t){var e=this.options,i=t.pointers.length===e.pointers,n=t.distance<e.threshold,s=t.deltaTime<e.time;if(this.reset(),t.eventType&m&&0===this.count)return this.failTimeout();if(n&&s&&i){if(t.eventType!=g)return this.failTimeout();n=!this.pTime||t.timeStamp-this.pTime<e.interval,s=!this.pCenter||D(this.pCenter,t.center)<e.posThreshold;if(this.pTime=t.timeStamp,this.pCenter=t.center,s&&n?this.count+=1:this.count=1,this._input=t,0==this.count%e.taps)return this.hasRequireFailures()?(this._timer=k(function(){this.state=8,this.tryEmit()},e.interval,this),2):8}return 32},failTimeout:function(){return this._timer=k(function(){this.state=32},this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){8==this.state&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),N.VERSION="2.0.8",N.defaults={domEvents:!1,touchAction:bt,enable:!0,inputTarget:null,inputClass:null,preset:[[Xt,{enable:!1}],[zt,{enable:!1},["rotate"]],[Yt,{direction:C}],[Mt,{direction:C},["swipe"]],[Ft],[Ft,{event:"doubletap",taps:2},["tap"]],[Nt]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};function Wt(t,e){this.options=a({},N.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=new((e=this).options.inputClass||(Q?mt:tt?Et:K?At:x))(e,rt),this.touchAction=new xt(this,this.options.touchAction),qt(this,!0),o(this.options.recognizers,function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])},this)}function qt(i,n){var s,r=i.element;r.style&&(o(i.options.cssProps,function(t,e){s=d(r.style,e),n?(i.oldCssProps[s]=r.style[s],r.style[s]=t):r.style[s]=i.oldCssProps[s]||""}),n||(i.oldCssProps={}))}Wt.prototype={set:function(t){return a(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?2:1},recognize:function(t){var e=this.session;if(!e.stopped){this.touchAction.preventDefaults(t);for(var i,n=this.recognizers,s=e.curRecognizer,r=((!s||8&s.state)&&(s=e.curRecognizer=null),0);r<n.length;)i=n[r],2===e.stopped||s&&i!=s&&!i.canRecognizeWith(s)?i.reset():i.recognize(t),!s&&14&i.state&&(s=e.curRecognizer=i),r++}},get:function(t){if(t instanceof M)return t;for(var e=this.recognizers,i=0;i<e.length;i++)if(e[i].options.event==t)return e[i];return null},add:function(t){if(i(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),(t.manager=this).touchAction.update(),t},remove:function(t){return i(t,"remove",this)||(t=this.get(t))&&-1!==(t=p(e=this.recognizers,t))&&(e.splice(t,1),this.touchAction.update()),this;var e},on:function(t,e){var i;if(t!==c&&e!==c)return i=this.handlers,o(u(t),function(t){i[t]=i[t]||[],i[t].push(e)}),this},off:function(t,e){var i;if(t!==c)return i=this.handlers,o(u(t),function(t){e?i[t]&&i[t].splice(p(i[t],e),1):delete i[t]}),this},emit:function(t,e){this.options.domEvents&&(i=t,n=e,(s=X.createEvent("Event")).initEvent(i,!0,!0),(s.gesture=n).target.dispatchEvent(s));var i,n,s,r=this.handlers[t]&&this.handlers[t].slice();if(r&&r.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var o=0;o<r.length;)r[o](e),o++}},destroy:function(){this.element&&qt(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},a(N,{INPUT_START:m,INPUT_MOVE:2,INPUT_END:g,INPUT_CANCEL:T,STATE_POSSIBLE:1,STATE_BEGAN:2,STATE_CHANGED:4,STATE_ENDED:8,STATE_RECOGNIZED:8,STATE_CANCELLED:16,STATE_FAILED:32,DIRECTION_NONE:y,DIRECTION_LEFT:E,DIRECTION_RIGHT:I,DIRECTION_UP:A,DIRECTION_DOWN:_,DIRECTION_HORIZONTAL:C,DIRECTION_VERTICAL:S,DIRECTION_ALL:nt,Manager:Wt,Input:P,TouchAction:xt,TouchInput:Et,MouseInput:x,PointerEventInput:mt,TouchMouseInput:At,SingleTouchInput:Tt,Recognizer:M,AttrRecognizer:z,Tap:Ft,Pan:Mt,Swipe:Yt,Pinch:zt,Rotate:Xt,Press:Nt,on:e,off:n,each:o,merge:U,extend:L,assign:a,inherit:t,bindFn:V,prefixed:d}),(void 0!==s?s:"undefined"!=typeof self?self:{}).Hammer=N,"function"==typeof define&&define.amd?define(function(){return N}):"undefined"!=typeof module&&module.exports?module.exports=N:s.Hammer=N}(window,document);

// scripts/plugins/MixonGames_EasyGestures/c3runtime/dom.js
(()=>{const t="MixonGames_EasyGestures",a=["DIRECTION_ALL","DIRECTION_VERTICAL","DIRECTION_HORIZONTAL","DIRECTION_DOWN","DIRECTION_UP","DIRECTION_RIGHT","DIRECTION_LEFT","DIRECTION_NONE"];class e extends DOMElementHandler{constructor(e){super(e,t),this.AddRuntimeMessageHandlers([["EG_ENABLE",()=>this.enable()],["EG_DISABLE",()=>this.disable()],["EG_ENABLE_EVENT",e=>this.enableEvent(e)],["EG_DISABLE_EVENT",e=>this.disableEvent(e)],["EG_VIEWPORT",e=>this.setViewport(e)],["EG_INIT",e=>this.init(e)],["EG_ADD_CUSTOM_EVENT",e=>this.registerCustomEvent(e)],["EG_REMOVE_CUSTOM_EVENT",e=>this.removeCustomEvent(e)]])}init({props:e}){this.props=e;try{this._canvas=document.querySelector("canvas"),this._gestures=new Hammer(document.body,{enable:this.props.enabled,recognizers:[[Hammer.Pan,{enable:!1}],[Hammer.Pinch,{enable:!1}],[Hammer.Press,{enable:!1}],[Hammer.Rotate,{enable:!1}],[Hammer.Swipe,{enable:!1}],[Hammer.Tap,{enable:!1}]]})}catch(e){console.error(e)}}enable(){this._gestures.set({enable:!0})}disable(){this._gestures.set({enable:!1})}enableCustom({eventType:e}){this._gestures.get(e).set({enable:!0})}disableCustom({eventType:e}){this._gestures.get(e).set({enable:!1})}setViewport({width:e,height:t}){this.viewport={width:e,height:t}}registerCustomEvent({eventName:e,type:t,settings:i}){if(!this._gestures.get(e)){"direction"in i&&(i.direction=Hammer[a[i.direction]]);const s=new Hammer[t]({event:e,...i});this._gestures.add(s),s.recognizeWith(this._gestures.get(t.toLowerCase())),this._gestures.on(e,e=>this._sendEvent(e))}}removeCustomEvent({eventName:e}){this._gestures.off(e),this._gestures.remove(e)}_sendEvent(e){this.PostToRuntimeElement("EG_EVENT",t,this._mapEventData(e))}_mapEventData(e){var{x:t,y:i}=this._calcPosition(e.center.x,e.center.y);return{type:e.type,additionalEvent:e.additionalEvent,deltaX:this._calcScale(e.deltaX),deltaY:this._calcScale(e.deltaY),deltaTime:e.deltaTime,distance:this._calcScale(e.distance),angle:e.angle,velocityX:e.velocityX,velocityY:e.velocityY,velocity:e.velocity,direction:e.direction,offsetDirection:e.offsetDirection,scale:e.scale,rotation:e.rotation,center:{x:t,y:i},srcEvent:this._mapPointerData(e.srcEvent),pointers:e.pointers.map(e=>this._mapPointerData(e)),changedPointers:e.changedPointers.map(e=>this._mapPointerData(e))}}_mapPointerData(e){var{x:t,y:i}=this._calcPosition(e.x,e.y);return{pointerId:e.pointerId,pointerType:e.pointerType,timeStamp:e.timeStamp,type:e.type,x:Math.round(t),y:Math.round(i)}}_calcPosition(e,t){e-=this._canvas.offsetLeft,t-=this._canvas.offsetTop,e=e*this.viewport.width/this._canvas.clientWidth,t=t*this.viewport.height/this._canvas.clientHeight;return{x:Math.round(e),y:Math.round(t)}}_calcScale(e){return e/Math.min(this.viewport.width,this.viewport.height)*e}}RuntimeInterface.AddDOMHandlerClass(e)})();

// start-export.js
'use strict';{if(window["C3_Is_Supported"]){const enableWorker=false;window["c3_runtimeInterface"]=new self.RuntimeInterface({useWorker:enableWorker,workerMainUrl:"workermain.js",runtimeScriptList:["scripts/c3main.js"],scriptFolder:"scripts/",exportType:"html5"})}};

